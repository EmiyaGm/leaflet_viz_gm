 var mauna_map_tool = {    map_container: null,    uid: null,    map: null,    frequently_used_city: [{        name: '全国',        zoom: 4,        center: [34.950204, 110.595009]    }, {        name: '北京',        zoom: 12,        center: [39.904989, 116.405285],    }, {        name: '上海',        zoom: 12,        center: [31.231706, 121.472644],    }, {        name: '广州',        zoom: 12,        center: [23.125178, 113.280637],    }, {        name: '深圳',        zoom: 12,        center: [22.5432839, 114.057979],    }, {        name: '天津',        zoom: 12,        center: [39.125596, 117.190182],    }, {        name: '成都',        zoom: 12,        center: [30.5727469, 104.066743],    }, {        name: '南京',        zoom: 12,        center: [32.05957, 118.796682],    }, {        name: '杭州',        zoom: 12,        center: [30.287459, 120.153576],    }, {        name: '武汉',        zoom: 12,        center: [30.584355, 114.298572],    }, {        name: '湖州',        zoom: 12,        center: [30.867198, 120.102398],    }, ],    province_data: [        { "name": "请选择", "value": "请选择" },        { "name": "北京市", "value": "北京市" },        { "name": "天津市", "value": "天津市" },        { "name": "河北省", "value": "河北省" },        { "name": "山西省", "value": "山西省" },        { "name": "内蒙古自治区", "value": "内蒙古自治区" },        { "name": "辽宁省", "value": "辽宁省" },        { "name": "吉林省", "value": "吉林省" },        { "name": "黑龙江省", "value": "黑龙江省" },        { "name": "上海市", "value": "上海市" },        { "name": "江苏省", "value": "江苏省" },        { "name": "浙江省", "value": "浙江省" },        { "name": "安徽省", "value": "安徽省" },        { "name": "福建省", "value": "福建省" },        { "name": "江西省", "value": "江西省" },        { "name": "山东省", "value": "山东省" },        { "name": "河南省", "value": "河南省" },        { "name": "湖北省", "value": "湖北省" },        { "name": "湖南省", "value": "湖南省" },        { "name": "广东省", "value": "广东省" },        { "name": "广西壮族自治区", "value": "广西壮族自治区" },        { "name": "海南省", "value": "海南省" },        { "name": "重庆市", "value": "重庆市" },        { "name": "四川省", "value": "四川省" },        { "name": "贵州省", "value": "贵州省" },        { "name": "云南省", "value": "云南省" },        { "name": "西藏自治区", "value": "西藏自治区" },        { "name": "陕西省", "value": "陕西省" },        { "name": "甘肃省", "value": "甘肃省" },        { "name": "青海省", "value": "青海省" },        { "name": "宁夏回族自治区", "value": "宁夏回族自治区" },        { "name": "新疆维吾尔自治区", "value": "新疆维吾尔自治区" },        { "name": "台湾省", "value": "台湾省" },        { "name": "香港特别行政区", "value": "香港特别行政区" },        { "name": "澳门特别行政区", "value": "澳门特别行政区" },    ],    tools: null,    _map_source: null, //防止与map_source重名    setting: {        open_tools: true,        tools_control: {            searchplace: true,            centerpoint: true,            scale: true,            zoomslider: true,            minimap: false,            tip: true,            marker: true,            cluster_car: true,            cluster_marker: true,            marker_range: true,        },        default_map_source: 'gaode',        map_default_show: {            open_tools: true,            tools_control: {                searchplace: true,                centerpoint: true,                scale: true,                zoomslider: true,                minimap: false,                tip: true,                marker: true,                cluster_car: true,                cluster_marker: true,                marker_range: true            },            default_map_source: 'gaode'        }    },    map_default_show: null,    map_show_setting: 1,    map_full_screen: 2,    click_for_setting: false,    init_tools: function() {        var _this = this;        var tools = window.parent.companySetting.map_tools ? JSON.parse(window.parent.companySetting.map_tools) : _this.tools;        var map_source = window.parent.companySetting.map_source ? JSON.parse(window.parent.companySetting.map_source) : _this._map_source;        var map_default_show = window.parent.companySetting.map_default_show ? JSON.parse(window.parent.companySetting.map_default_show) : _this.map_default_show;        var map_show_setting = window.parent.companySetting.map_show_setting ? JSON.parse(window.parent.companySetting.map_show_setting) : _this.map_show_setting;        var map_full_screen = window.parent.companySetting.map_full_screen ? JSON.parse(window.parent.companySetting.map_full_screen) : _this.map_full_screen;        for (var tool in tools) {            if (tools[tool]) {                var _tool = _this[tool];                mauna_map.addToolbar(mauna_map_tool.map, _tool["className"], _tool["template"], _tool["clickFunc1"], _tool["clickFunc2"], _tool["callBack"]);            }        }        mauna_map_tool.map_source.change_source_setting(map_source);        mauna_map_tool.map_default_show = map_default_show;        $('#tools>li>i').tooltip({ placement: 'bottom', container: 'body' });        $('.switch_group').tooltip({ title: '地图工具', placement: 'bottom', container: 'body' });        var city_navigation = $(mauna_map.getNavigation(1));        var default_data = [{ "name": "请选择", "value": "请选择" }, ];        var province = city_navigation.find('[data-id=province]');        var city = city_navigation.find('[data-id=city]');        var district = city_navigation.find('[data-id=district]');        var province_select = province.mauna_select({ data: _this.province_data });        var city_select = city.mauna_select({ data: default_data });        var district_select = district.mauna_select({ data: default_data });        province.change(function() {            var province = $(this).find('input').val();            if (province == '请选择') return;            var res = mauna_map.getSubdistrict(province);            console.log(res);            var province_data = res.districts[0];            var center = province_data.center.split(',').reverse();            var districts = province_data.districts;            mauna_map.setView(center, _this.map, 8);            var city_data = [{ "name": "请选择", "value": "请选择" }, ];            for (var i = 0; i < districts.length; i++) {                city_data.push({ "name": districts[i].name, "value": districts[i].name });            }            city_select.refresh(city_data);            district_select.refresh(default_data);        });        city.change(function() {            var city = $(this).find('input').val();            if (city == '请选择') return;            var res = mauna_map.getSubdistrict(city);            var city_data = res.districts[0];            var center = city_data.center.split(',').reverse();            var districts = city_data.districts;            mauna_map.setView(center, _this.map, 11);            var district_data = [{ "name": "请选择", "value": "请选择" }, ];            for (var i = 0; i < districts.length; i++) {                district_data.push({ "name": districts[i].name, "value": districts[i].name });            }            district_select.refresh(district_data);        });        district.change(function() {            var district = $(this).find('input').val();            if (district == '请选择') return;            var res = mauna_map.getSubdistrict(district);            var district_data = res.districts[0];            var center = district_data.center.split(',').reverse();            var districts = district_data.districts;            mauna_map.setView(center, _this.map, 15);        });        _this.map_container.resize(function() {            _this.map.invalidateSize();        })        try {            if (MAP_BG_IMG_URL) {                mauna_map.changeContainerBg(MAP_BG_IMG_URL);            } else {                mauna_map.changeContainerBg('');            }        } catch (e) {        }        var full_text = '全屏';        var exit_text = '还原';        $(".leaflet-control-maxmap").tooltip({ title: full_text, container: 'body', placement: 'auto' });        if (!mauna_map_tool.click_for_setting) {            $(".leaflet-control-maxmap").on('click', function(e) {                var parent = mauna_map_tool.map_container.parent().parent();                if (parent.hasClass('minchange')) {                    $(this).attr('title', full_text).tooltip('fixTitle');                    parent.flex_full_screen($(this), false);                } else {                    $(this).attr('title', exit_text).tooltip('fixTitle');                    parent.flex_full_screen($(this), true);                }            });            //初始全屏            var parent = mauna_map_tool.map_container.parent().parent();            var full_screen_btn = mauna_map_tool.map_container.find(".leaflet-control-maxmap");            if (map_full_screen == 1) {                full_screen_btn.attr('title', exit_text).tooltip('fixTitle');                parent.flex_full_screen(full_screen_btn, true);            }        }        $('.switch_group').click(function() {            var is_open = $(this).attr('data-state') == 1 ? true : false;            if (mauna_map_tool.click_for_setting) {                mauna_map_tool.map_default_show.open_tools = is_open;                mauna_map_tool.map_setting_callback();            } else {                mauna_map_tool.setting.open_tools = is_open;                mauna_map_tool.save_setting_cookie();            }        });        // 初始显示        if (map_show_setting == 1) {            mauna_map_tool.setting = mauna_map_tool.get_setting_cookie();            mauna_map_tool.change_show(mauna_map_tool.setting);        } else if (map_show_setting == 2) {            mauna_map_tool.change_show(map_default_show);        }    },    close_all_tools: function() {        var _this = this;        var tools = _this.tools;        for (var tool in tools) {            if (tools[tool]) {                var _tool = _this[tool];                _tool.clickFunc2();            }        }    },    change_setting: function(setting) {        var empty = {}        $.extend(empty, mauna_map_tool.setting, setting);        setting = empty;        console.log('setting', setting);        var map_tools = setting.map_tools;        var map_source = setting.map_source;        var map_default_show = setting.map_default_show;        mauna_map_tool.change_tools_setting(map_tools);        mauna_map_tool.map_source.change_source_setting(map_source);        mauna_map_tool.change_show(map_default_show);    },    change_tools_setting: function(map_tools) {        console.log(map_tools);        mauna_map_tool.map_container.find('#tools').empty();        var _this = this;        for (var tool in map_tools) {            if (map_tools[tool]) {                var _tool = _this[tool];                mauna_map.addToolbar(mauna_map_tool.map, _tool["className"], _tool["template"], _tool["clickFunc1"], _tool["clickFunc2"], _tool["callBack"]);            }        }    },    change_show: function(map_default_show) {        var open_tools = map_default_show.open_tools;        var tools_control = map_default_show.tools_control;        var default_map_source = map_default_show.default_map_source;        mauna_map_tool.change_open_tools(open_tools);        mauna_map_tool.view_control.change_tools_control(tools_control);        mauna_map_tool.map_source.change_default(default_map_source);    },    change_open_tools: function(open_tools) {        var is_open = $('.switch_group').attr('data-state');        if ((is_open == 0 && open_tools) || (is_open == 1 && !open_tools)) {            $('.switch_group').click();        }    },    get_setting_cookie: function() {        var cookie = $.cookie('map_setting');        cookie = cookie ? JSON.parse(cookie) : {};        var setting = $.extend({}, mauna_map_tool.setting, cookie);        return setting;            },    save_setting_cookie: function() {        var cookie = JSON.stringify(mauna_map_tool.setting);        $.cookie('map_setting', cookie);    },    search: {        search_div: null,        template: '',        callBack: function() {},        init: function() {            var _this = mauna_map_tool.search;            var search_div = _this.search_div;            var map = mauna_map_tool.map;            var search_markers = [];            var options = {                container: search_div,                placeholder: '地点',                callback: place_search,            };            var searchInput = new mauna.searchInput(options);            searchInput.init();            search_div.find('input').on('focus', function() {                long_search_div();            }).on('keyup', function() {                long_search_div();            });            setInterval(function() {                var input = search_div.find('input');                var is_focus = input.is(":focus");                if (!is_focus && input.val() == '') {                    short_search_div();                }                if (input.val() == '') {                    for (var i = 0; i < search_markers.length; i++) {                        if (map.hasLayer(search_markers[i])) search_markers[i].removeFrom(map);                    }                    search_markers = [];                }            }, 1000);            $(document).click(function(e) {                var target = e.target;                if ($.contains(search_div[0], target)) {                    long_search_div();                    return;                }                if (search_div.find('input').val() == '') {                    short_search_div();                } else {                    long_search_div();                }            });            function long_search_div() {                search_div.width('215px');            }            function short_search_div() {                search_div.width('84px');            }            mauna_map_tool.map_container.on('mouseover', '.search-marker-div', function() {                $(this).find('.mauna-search-marker-tip').addClass('hover');            }).on('mouseout', '.search-marker-div', function() {                $(this).find('.mauna-search-marker-tip').removeClass('hover');            });            function place_search(keywords, no_matches, result_list, search_input) {                var search_result = mauna_map.getSearchTips(keywords);                //console.log(search_result);                if ($.isArray(search_result) && search_result.length > 0) {                    no_matches.hide();                    result_list.show();                    result_list.empty();                    result_list.off('click');                    for (var i = 0; i < search_result.length; i++) {                        var html = '';                        var item = search_result[i];                        html += '<div class="result-item" data-index="' + i + '"><div class="result-text" title="' + item.name + '">' + item.name + '</div></div>';                        result_list.append(html);                    }                    result_list.on('click', '.result-item', function() {                        var index = $(this).attr('data-index');                        var item = search_result[index];                        var location = item.location;                        if (location && location.length > 0) {                            location = location.split(',');                            var latlng = [Number(location[1]), Number(location[0])];                            mauna_map.setView(latlng, map, 16);                        }                        var _search_result = mauna_map.getSearch(item.name);                        _search_result = _search_result.pois;                        for (var i = 0; i < _search_result.length; i++) {                            var _item = _search_result[i];                            var lng_lat = _item.location.split(',').reverse();                            var html = '<div class="mauna-search-poi">' + (i + 1) + '</div><div class="mauna-search-marker-tip" title="' + _item.name + '"><span class="title">' + _item.name + '</span></div>';                            var search_icon_options = {                                html: html,                                iconSize: [19, 34],                                className: 'search-marker-div',                            };                            var _marker = mauna_map.myIcon(map, lng_lat, search_icon_options);                            search_markers.push(_marker);                        }                        searchInput.search_input.val(item.name);                        result_list.hide();                    });                } else {                    no_matches.show();                    result_list.hide();                }            }        }    },    // 视野    view_point: {        className: 'view_point',        template: '<li data-picture="0" class="view_point"><i class="map-icon map-view" data-placement="auto bottom" data-toggle="tooltip" title="" data-original-title="我的视野" ></i>\                        <div class="views_window">\                            <div style="background-color: #EDEDED;padding: 0;margin-left: 1px;">\                                <div class="views_row">\                                    <input type="text" class="form-control view_point_name">\                                    <i class="views_add map_plus" ></i>\                                </div>\                            </div>\                            <div class="views_div">\                            </div>\                        </div>\                    </li>',        clickFunc1: function(e) {            mauna_map_tool.close_all_tools();            $(document).find('.views_window').show();        },        clickFunc2: function(e) {            $(document).find('.views_window').hide();        },        callBack: function() {            $('.views_window').on('click', function(e) {                e.stopPropagation();            });            var visual_field_model = new parse.model(modelConfig['visual_field']);            // 我的视野            var default_view = {};            var set_default_text = '设为默认';            var default_text = '(默认)';            init_views();            $(document).find('.view_point').find('.views_add').click(function() {                save_view_point();            });            // 初始化视野点            function init_views() {                $.ajax({                    'type': 'POST',                    'data': {                        'class': 'visual_field',                    },                    'dataType': 'json',                    'url': '?app=data&controller=object&action=find&deep=true',                    'success': function(res) {                        if (res.state) {                            var data = res.data;                            var html = '';                            for (var index in data) {                                var row = data[index];                                var center = row.center;                                var point = center[1] + "," + center[0];                                var default_html, set_default_html;                                if (row.is_default == 1) {                                    set_default_html = '<span></span>';                                    default_html = '<div class="default-view">' + default_text + '</div>';                                } else {                                    set_default_html = '<span>' + set_default_text + '</span>';                                    default_html = '<div class="default-view"></div>';                                }                                //console.log(row, center);                                html = '<div class="views_item_container" data-name="' + row.name + '" >';                                html += '<div class="views_item" data-viewid="' + row._id + '" data-zoom="' + row.zoom + '"  data-center="' + point + '" data-name="' + row.name + '" title="' + row.name + '">' + row.name + '</div>';                                html += default_html;                                html += '<div class="delete_view"><i class="delete_view_point map_close"></i></div>';                                html += '<div class="set_default" data-viewid="' + row._id + '" data-default="' + row.is_default + '">' + set_default_html + '</div>';                                html += '</div>';                                $('.views_div').append(html);                                if (row.is_default == 1) {                                    default_view.zoom = row.zoom;                                    default_view.center = point.split(',');                                    default_view.has_default = true;                                    default_view.view_id = row._id;                                }                            }                            function change_icon(view_id, is_default) {                                var set_default = $('.views_div').find('.set_default[data-viewid=' + view_id + ']');                                var views_item = $('.views_div').find('.views_item[data-viewid=' + view_id + ']');                                var _default = views_item.next('.default-view');                                if (is_default) {                                    _default.text(default_text);                                    set_default.attr('data-default', 1);                                    set_default.html('');                                    set_default.parent().clone().prependTo($('.views_div'));                                    set_default.parent().remove();                                } else {                                    _default.text('');                                    set_default.attr('data-default', 0);                                    set_default.html('<span>' + set_default_text + '</span>');                                }                            }                            if (default_view.view_id) {                                mauna_map.setView([default_view.center[0], default_view.center[1]], mauna_map_tool.map, default_view.zoom);                                change_icon(default_view.view_id, true);                            } else {                                mauna_map.setView([34.950204, 110.595009], mauna_map_tool.map, 4);                            }                            $('.views_div').on('click', '.views_item', function() {                                var zoom = $(this).attr('data-zoom');                                var center = $(this).attr('data-center').toString();                                console.log(zoom, center);                                var arr = center.split(',');                                mauna_map.setView([arr[0], arr[1]], mauna_map_tool.map, zoom);                            });                            $('.views_div').on('mouseover', '.views_item_container', function() {                                $(this).find('.set_default').show();                                $(this).find('.delete_view').show();                                if ($(this).find('.set_default').attr('data-default') == 0) {                                    $(this).find('.views_item').width('calc(100% - 68px)');                                }                            }).on('mouseout', '.views_item_container', function() {                                $(this).find('.set_default').hide();                                $(this).find('.delete_view').hide();                                if ($(this).find('.set_default').attr('data-default') == 0) {                                    $(this).find('.views_item').width('calc(100% - 55px)');                                }                            });                            $('.views_div').on('click', '.delete_view_point', function() {                                //$(`div[data-viewid=${viewid}]`).parent('div[data-name]').hide();                                var viewid = $(this).parent().parent().find('div.views_item').attr('data-viewid');                                var jsondata_delete = JSON.stringify({                                    'class': 'visual_field',                                    '_id': viewid                                });                                $.ajax({                                    type: 'Post',                                    url: '/?app=data&controller=object&action=delete', //替换为后端接口                                    data: jsondata_delete,                                    complete: function(res) {                                        if (res.status) {                                            mauna.tips('删除视野成功', 'success');                                            $('.views_div').find('div.views_item[data-viewid=' + viewid + ']').parent().remove();                                            if (default_view.view_id && default_view.view_id == viewid) default_view = {};                                        } else {                                            mauna.tips('删除视野失败', 'error');                                        }                                    }                                });                            });                            $('.views_div').on('click', '.set_default', function() {                                var view_id = $(this).parent().find('div.views_item').attr('data-viewid');                                console.log(view_id);                                if (default_view.view_id) {                                    if (default_view.view_id == view_id) return;                                    var data_update = {};                                    data_update.class = modelConfig['visual_field'];                                    data_update.data = {                                        '_id': default_view.view_id,                                        'is_default': '0'                                    };                                    var jsondata_update = JSON.stringify(data_update);                                    $.ajax({                                        type: 'POST',                                        url: '?app=data&controller=object&action=update',                                        data: jsondata_update,                                        dataType: 'json',                                        success: function(res) {                                            console.log(res);                                            if (res.status) {                                                change_icon(default_view.view_id, false);                                                data_update.class = modelConfig['visual_field'];                                                data_update.data = {                                                    '_id': view_id,                                                    'is_default': 1                                                };                                                jsondata_update = JSON.stringify(data_update);                                                $.ajax({                                                    type: 'POST',                                                    url: '?app=data&controller=object&action=update',                                                    data: jsondata_update,                                                    dataType: 'json',                                                    success: function(res) {                                                        if (res.status) {                                                            change_icon(view_id, true);                                                            default_view.view_id = view_id;                                                            mauna.tips('设置默认视野成功', 'success');                                                        } else {                                                            mauna.tips('设置默认视野失败', 'error');                                                        }                                                    }                                                });                                            } else {                                                mauna.tips('设置默认视野失败', 'error');                                            }                                        }                                    });                                } else {                                    var data_update = {};                                    data_update.class = modelConfig['visual_field'];                                    data_update.data = {                                        '_id': view_id,                                        'is_default': 1                                    };                                    var jsondata_update = JSON.stringify(data_update);                                    $.ajax({                                        type: 'POST',                                        url: '?app=data&controller=object&action=update',                                        data: jsondata_update,                                        dataType: 'json',                                        success: function(res) {                                            if (res.status) {                                                change_icon(view_id, true);                                                default_view.view_id = view_id;                                                mauna.tips('设置默认视野成功', 'success');                                            } else {                                                mauna.tips('设置默认视野失败', 'error');                                            }                                        }                                    });                                }                            });                        } else {                            mauna.tips('加载视野点失败', 'error');                        }                    }                });            }            function save_view_point() {                var map_zoom = mauna_map_tool.map.getZoom();                var map_center = mauna_map_tool.map.getCenter();                var point_name = $('.view_point_name').val();                console.log(map_zoom, map_center);                if (point_name == '') {                    mauna.tips('请填写视野名称', 'warn');                    return;                }                var data = {                    'class': 'visual_field',                    'data': {                        'name': point_name,                        'zoom': map_zoom.toString(),                        'center': {                            '__type': 'GeoPoint',                            'latitude': map_center.lat,                            'longitude': map_center.lng                        },                        'is_default': 0,                    }                };                var jsondata = JSON.stringify(data);                $.ajax({                    type: 'POST',                    url: '?app=data&controller=object&action=create', //替换为后端接口                    data: jsondata,                    dataType: 'json',                    success: function(res) {                        console.log('save_view_point');                        var viewid = res.data._id;                        var row = res.data;                        var center = row.center;                        var point = center[1] + "," + center[0];                        if (res.status) {                            mauna.tips('保存视野成功', 'success');                        } else {                            mauna.tips('保存视野失败', 'error');                        }                        $('.view_point_name').val('');                        var html = '';                        var default_html, set_default_html;                        if (row.is_default == 1) {                            set_default_html = '<span></span>';                            default_html = '<div class="default-view">' + default_text + '</div>';                        } else {                            set_default_html = '<span>' + set_default_text + '</span>';                            default_html = '<div class="default-view"></div>';                        }                        html = '<div class="views_item_container" data-name="' + row.name + '" >';                        html += '<div class="views_item" data-viewid="' + row._id + '" data-zoom="' + row.zoom + '"  data-center="' + point + '" data-name="' + row.name + '" title="' + row.name + '">' + row.name + '</div>';                        html += default_html;                        html += '<div class="delete_view"><i class="delete_view_point map_close"></i></div>';                        html += '<div class="set_default" data-viewid="' + row._id + '" data-default="' + row.is_default + '">' + set_default_html + '</div>';                        html += '</div>';                        $('.views_div').prepend(html);                    }                });            }        },        closeFunc: function() {        },    },    // 显示控制    view_control: {        className: 'view_control',        template: '<li data-picture="0" class="view_control" >\                        <i class="map-icon map-eye" data-placement="auto bottom" data-toggle="tooltip" title="" data-original-title="显示控制" ></i>\                        <div class="tools_window">\                            <label class="tools-item i-checks">\                                地址搜索\                                <input type="checkbox" tool-name="searchplace" checked>\                            </label>\                            <label class="tools-item i-checks">\                                中心地址\                                <input type="checkbox" tool-name="centerpoint" checked>\                            </label>\                            <label class="tools-item i-checks">\                                比例尺\                                <input type="checkbox" tool-name="scale" checked>\                            </label>\                            <label class="tools-item i-checks">\                                级别工具\                                <input type="checkbox" tool-name="zoomslider" checked>\                            </label>\                            <label class="tools-item i-checks">\                                鹰眼地图\                                <input type="checkbox" tool-name="minimap">\                            </label>\                            <label class="tools-item i-checks">\                                重叠提示\                                <input type="checkbox" tool-name="tip">\                            </label>\                            <label class="tools-item i-checks">\                                车辆聚合\                                <input type="checkbox" tool-name="cluster_car">\                            </label>\                            <label class="tools-item i-checks">\                                兴趣点聚合\                                <input type="checkbox" tool-name="cluster_marker" checked>\                            </label>\                            <label class="tools-item i-checks">\                                显示兴趣点\                                <input type="checkbox" tool-name="marker" checked>\                            </label>\                            <label class="tools-item i-checks">\                                兴趣点范围\                                <input type="checkbox" tool-name="marker_range" checked>\                            </label>\                        </div>\                    </li>',        tools_control: {            searchplace: true,            centerpoint: true,            scale: true,            zoomslider: true,            minimap: false,            tip: false,            marker: true,            cluster_car: false,            cluster_marker: true,            marker_range: true,        },        tip_polygon: null,        markers_cluster: null,        cars_cluster: null,        clickFunc1: function(e) {            mauna_map_tool.close_all_tools();            $(document).find('.tools_window').show();        },        clickFunc2: function(e) {            $(document).find('.tools_window').hide();        },        callBack: function() {            var map = mauna_map_tool.map;            var tools_window = $(document).find('.tools_window');            var base_tools = {                "searchplace": true,                "centerpoint": true,                "scale": true,                "zoomslider": true,                "minimap": true,            }            tools_window.find('.i-checks').iCheck({                checkboxClass: 'icheckbox_map_big',                radioClass: 'iradio_map'            });            mauna_map.hideComponent(map, 'iconLayers');            mauna_map.hideComponent(map, 'ruler');            tools_window.find('input[type=checkbox]').on('ifChecked', function() {                var tool = $(this).attr('tool-name');                if (base_tools[tool]) {                    mauna_map.showComponent(map, tool);                } else if (tool == "marker") {                    if (mauna_map_tool.setting.tools_control['cluster_marker']) {                        mauna_map_tool.make_marker.open_cluster();                    } else {                        mauna_map_tool.make_marker.show_markers();                    }                } else if (tool == "cluster_marker") {                    if (mauna_map_tool.setting.tools_control['marker']) {                        mauna_map_tool.make_marker.hide_markers();                        mauna_map_tool.make_marker.open_cluster();                    } else {                        mauna_map_tool.make_marker.hide_markers();                    }                } else if (tool == "cluster_car") {                    var cars = [];                    try {                        cars = vehicle_map_tool ? vehicle_map_tool.markers : [];                    } catch (e) {                    }                    var markers = [];                    for (var index in cars) {                        var car = cars[index];                        if (car) markers.push(car);                    }                    console.log(markers);                    var options = {                        uniqueName: 'marker-cluster-vehicle'                    };                    mauna_map_tool.view_control.cars_cluster = mauna_map.addCluster(markers, map, options);                } else if (tool == "tip") {                    mauna_map_tool.view_control.open_tip();                } else if (tool == "marker_range") {                    mauna_map_tool.make_marker.show_range();                }                if (mauna_map_tool.click_for_setting) {                    mauna_map_tool.map_default_show.tools_control[tool] = true;                    mauna_map_tool.map_setting_callback();                } else {                    mauna_map_tool.setting.tools_control[tool] = true;                    mauna_map_tool.save_setting_cookie();                }            }).on('ifUnchecked', function() {                var tool = $(this).attr('tool-name');                if (base_tools[tool]) {                    mauna_map.hideComponent(map, tool);                } else if (tool == "marker") {                    if (mauna_map_tool.setting.tools_control && mauna_map_tool.setting.tools_control['cluster_marker']) {                        mauna_map_tool.make_marker.close_cluster();                    }                    mauna_map_tool.make_marker.hide_markers();                } else if (tool == "cluster_marker") {                    mauna_map_tool.make_marker.close_cluster();                    if (mauna_map_tool.setting.tools_control && mauna_map_tool.setting.tools_control['marker']) {                        mauna_map_tool.make_marker.show_markers();                    } else {                        mauna_map_tool.make_marker.hide_markers();                    }                } else if (tool == "cluster_car") {                    var cars = [];                    try {                        cars = vehicle_map_tool ? vehicle_map_tool.markers : [];                    } catch (e) {                    }                    var markers = [];                    for (var index in cars) {                        var car = cars[index];                        if (car) markers.push(car);                    }                    mauna_map.removeCluster(mauna_map_tool.view_control.cars_cluster, markers, map);                } else if (tool == "tip") {                    mauna_map_tool.view_control.close_tip();                } else if (tool == "marker_range") {                    mauna_map_tool.make_marker.hide_range();                }                if (mauna_map_tool.click_for_setting) {                    mauna_map_tool.map_default_show.tools_control[tool] = false;                    mauna_map_tool.map_setting_callback();                } else {                    mauna_map_tool.setting.tools_control[tool] = false;                    mauna_map_tool.save_setting_cookie();                }            });            //var tools_control = mauna_map_tool.setting.tools_control;            // function init_tool_cookie() {            //     var cookie = $.cookie('tools_control');            //     if (cookie) tools_control = $.parseJSON(cookie);            //     for (var index in tools_control) {            //         if (tools_control[index]) {            //             $('input[tool-name=' + index + ']').iCheck('check');            //         } else {            //             $('input[tool-name=' + index + ']').iCheck('uncheck');            //         }            //     }            // }            // init_tool_cookie();        },        change_tools_control: function(tools_control) {            for (var index in tools_control) {                if (tools_control[index]) {                    $('input[tool-name=' + index + ']').iCheck('check');                } else {                    $('input[tool-name=' + index + ']').iCheck('uncheck');                }            }        },        minimap_closecallback: function() {            console.log('minimap_closecallback');            if (mauna_map_tool.tools['view_control']) {                if (mauna_map_tool.setting.tools_control['minimap']) {                    mauna_map_tool.setting.tools_control['minimap'] = false;                                        mauna_map_tool.save_setting_cookie();                    //$.cookie('tools_control', JSON.stringify(mauna_map_tool.view_control.tools_control));                    $('input[tool-name=minimap]').iCheck('uncheck');                }            }        },        open_tip: function() {            var map = mauna_map_tool.map;            var _rect;            map.on('mousemove', function(e) {                var markers = mauna_map_tool.view_control.get_shown_markers();                mauna_map.coverTips(map, markers, e.latlng, function(map, results, rect) {                    //console.log(rect._latlngs === _rect._latlngs);                    if (_rect) {                        var bounds = _rect._bounds;                        if (e.latlng.lat <= bounds._northEast.lat &&                            e.latlng.lat >= bounds._southWest.lat &&                            e.latlng.lng <= bounds._northEast.lng &&                            e.latlng.lng >= bounds._southWest.lng) return;                    }                    if (_rect && rect) {                        var bounds1 = _rect._bounds;                        var bounds2 = rect._bounds;                        if (bounds1._northEast.lat == bounds2._northEast.lat &&                            bounds1._northEast.lng == bounds2._northEast.lng &&                            bounds1._southWest.lat == bounds2._southWest.lat &&                            bounds1._southWest.lng == bounds2._southWest.lng) return;                    }                    if (rect && results.length > 1) {                        if (_rect) {                            _rect.closePopup();                            _rect.unbindPopup();                        }                        _rect = rect;                        //console.log(results);                        $('.leaflet-covertip-rect').remove();                        vehicle_map_tool.close_callback();                        rect.addTo(map);                        var $container = $('<div class="cover-tips-container"></div>');                        $container.append('<div class="cover-tips-title"></div><div class="cover-tips-content"></div>');                        var $title = $container.find('.cover-tips-title');                        var $content = $container.find('.cover-tips-content');                        $title.append('<div>重叠提示 [' + results.length + ']</div><span></span>');                        $content.append('<div class="cover-tips-content-column cover-tips-content-column-2"></div><div class="cover-tips-content-column cover-tips-content-column-2"></div>');                        var $vehicle = $content.find('.cover-tips-content-column:first');                        var $marker = $content.find('.cover-tips-content-column:last');                        $vehicle.append('<div class="cover-tips-content-column-title"></div><div class="cover-tips-content-column-content"></div>');                        $marker.append('<div class="cover-tips-content-column-title"></div><div class="cover-tips-content-column-content"></div>');                        var _vehicle = 0,                            _marker = 0;                        for (var i = 0; i < results.length; i++) {                            var marker = results[i];                            if (marker.car_id) {                                var _html = $(marker.options.icon.options.html);                                var icon = _html.find('img').attr('src');                                var name = _html.find('.car-state').text();                                var html = '<div class="cover-tips-content-item" data-id="' + i + '"><img src="' + icon + '"><span>' + name + '</span></div>';                                $vehicle.find('.cover-tips-content-column-content').append(html);                                _vehicle++;                            } else {                                var name = marker.data.name;                                var icon = marker.data.marker_icon.icon;                                var html = '<div class="cover-tips-content-item" data-id="' + i + '"><img src="' + icon + '"><span>' + name + '</span></div>';                                $marker.find('.cover-tips-content-column-content').append(html);                                _marker++;                            }                        }                        $vehicle.find('.cover-tips-content-column-title').html('车辆 [' + _vehicle + ']');                        $marker.find('.cover-tips-content-column-title').html('兴趣点 [' + _marker + ']');                        $content.find('.cover-tips-content-item').click(function() {                            var i = $(this).attr('data-id');                            var marker = results[i];                            if (marker.car_id) {                                var id = marker.car_id;                                var _zoom = vehicle_map_tool.map.getZoom();                                vehicle_map_tool.markers[id].fire('click', { _zoom: _zoom });                                if (_rect) {                                    _rect.closePopup();                                    _rect.unbindPopup();                                    _rect = null;                                }                                $('.leaflet-covertip-rect').remove();                                //vehicle_map_tool.map.setZoom(_zoom);                            } else {                                var id = marker.data._id;                                mauna_map_tool.make_marker.markers_data[id].fire('click');                            }                        })                        $title.find('span').click(function() {                            if (_rect) {                                _rect.closePopup();                                _rect.unbindPopup();                                _rect = null;                            }                            $('.leaflet-covertip-rect').remove();                        });                        var popup_options = {                            closeButton: false,                            closeOnClick: false,                            autoClose: true,                        }                        rect.bindPopup($container[0], popup_options).openPopup();                        rect._popup.off('mousemove');                        $('.cover-tips-container').on('mousemove', function(e) {                            e.stopPropagation();                            return;                        });                        map.on('zoomend', function() {                            if (_rect) {                                _rect.closePopup();                                _rect.unbindPopup();                                _rect = null;                            }                            $('.leaflet-covertip-rect').remove();                        });                    }                });            });        },        close_tip: function() {            mauna_map_tool.map.off('mousemove');            if (mauna_map_tool.view_control.tip_polygon) mauna_map.removePolygon(mauna_map_tool.view_control.tip_polygon);        },        add_cars_into_cluster: function(markers) {            //debugger            if (mauna_map_tool.view_control.cars_cluster) {                mauna_map.addToCluster(mauna_map_tool.map, markers, mauna_map_tool.view_control.cars_cluster);            }        },        remove_cars_from_cluster: function(markers) {            if (mauna_map_tool.view_control.cars_cluster) {                mauna_map.removeFromCluster(mauna_map_tool.map, markers, mauna_map_tool.view_control.cars_cluster);            }        },        hide_background: function() {            var base_tools = ["searchplace", "centerpoint", "scale", "zoomslider", "minimap"];            var map = mauna_map_tool.map;            for (var i = 0; i < base_tools.length; i++) {                var tool = base_tools[i];                if (mauna_map_tool.setting.tools_control[tool]) {                    mauna_map.showComponent(map, tool);                }            }        },        show_background: function() {            var base_tools = ["searchplace", "centerpoint", "scale", "zoomslider", "minimap"];            var map = mauna_map_tool.map;            for (var i = 0; i < base_tools.length; i++) {                var tool = base_tools[i];                mauna_map.hideComponent(map, tool);            }        },        get_shown_markers: function() {            var markers = [];            try {                for (var i in vehicle_map_tool.markers) {                    var marker = vehicle_map_tool.markers[i];                    if (marker && mauna_map_tool.map.hasLayer(marker)) markers.push(marker);                }            } catch (e) {            }            for (var i = 0; i < mauna_map_tool.make_marker.markers.length; i++) {                var marker = mauna_map_tool.make_marker.markers[i];                if (mauna_map_tool.map.hasLayer(marker)) markers.push(marker);            }            return markers;        },    },    // 兴趣点    make_marker: {        className: 'make_marker',        template: '<li data-picture="0" class="make_marker"><i class="map-icon map-pushpin" data-placement="auto bottom" data-toggle="tooltip" title="" data-original-title="添加地图兴趣点"></i></li>',        add_template: '<div class="col-md-12" style="color: #999999;">添加地图兴趣点<i class="close_marker fa fa-times"></i></div>',        edit_template: '<div class="col-md-12" style="color: #999999;">编辑地图兴趣点<i class="close_marker fa fa-times"></i></div>',        create_tooltip: "点击左键标记位置， 按 Esc 取消",        move_tooltip: "拖动可调整位置",        tooltip_options: {            permanent: true,            offset: [18, -16],            direction: 'right',        },        navigation: null,        marker_tree: null,        marker_type_url: '?app=data&controller=object&action=find',        marker_tree_url: '?app=vehicle&controller=tag&action=interestCategoryTree',        marker_tree_point_url: '?app=vehicle&controller=tag&action=interestCategoryPointTree',        marker_temp: null,        active_marker_id: null,        markers: [],        markers_data: {},        add_marker_div: $('<div class="add_marker card-div-border"></div>'),        save_callback: null,        active_callback: null,        MaxZIndex: 0,        icon_data: [{                'title': '自定义',                'data': [                    { 'name': '定位', 'src': '/common/mauna/images/map_label_default_normal.svg' },                    { 'name': '甲醇', 'src': '/common/mauna/images/map_label_methanol_normal.svg' },                    { 'name': '4S店', 'src': '/common/mauna/images/map_label_4s_normal.svg' },                    { 'name': '充电', 'src': '/common/mauna/images/map_label_charging_normal.svg' },                    { 'name': '甲醇车4S店', 'src': '/common/mauna/images/map_label_methanol_4s.svg' },                    { 'name': '甲醇车二级网点', 'src': '/common/mauna/images/map_label_methanol_lattice_point.svg' },                ]            },            {                'title': '标记',                'data': [                    { 'name': '标记', 'src': '/common/mauna/images/map_icon_map_pin.svg' },                    { 'name': '航线标记', 'src': '/common/mauna/images/map_icon_route_pin.svg' },                    { 'name': '圆形', 'src': '/common/mauna/images/map_icon_circle.svg' },                    { 'name': '方形', 'src': '/common/mauna/images/map_icon_square.svg' },                    { 'name': '方形标记', 'src': '/common/mauna/images/map_icon_square_pin.svg' },                    { 'name': '盾形', 'src': '/common/mauna/images/map_icon_shield.svg' },                    { 'name': '圆角矩形', 'src': '/common/mauna/images/map_icon_square_rounded.svg' },                ]            },            {                'title': '通用',                'data': [                    { 'name': '画廊', 'src': '/common/mauna/images/map_icon_art_gallery.svg' },                    { 'name': '银行', 'src': '/common/mauna/images/map_icon_bank.svg' },                    { 'name': '体育馆', 'src': '/common/mauna/images/map_icon_gym.svg' },                    { 'name': '公共厕所', 'src': '/common/mauna/images/map_icon_toilet.svg' },                    { 'name': 'ATM', 'src': '/common/mauna/images/map_icon_atm.svg' },                    { 'name': '大学', 'src': '/common/mauna/images/map_icon_university.svg' },                    { 'name': '图书馆', 'src': '/common/mauna/images/map_icon_library.svg' },                    { 'name': '博物馆', 'src': '/common/mauna/images/map_icon_museum.svg' },                ]            },            {                'title': '食物',                'data': [                    { 'name': '烧烤店', 'src': '/common/mauna/images/map_icon_bakery.svg' },                    { 'name': '咖啡馆', 'src': '/common/mauna/images/map_icon_cafe.svg' },                    { 'name': '汉堡店', 'src': '/common/mauna/images/map_icon_food.svg' },                    { 'name': '餐厅', 'src': '/common/mauna/images/map_icon_restaurant.svg' },                ]            },            {                'title': '交通',                'data': [                    { 'name': '机场', 'src': '/common/mauna/images/map_icon_airport.svg' },                    { 'name': '停车场', 'src': '/common/mauna/images/map_icon_parking.svg' },                    { 'name': '的士站', 'src': '/common/mauna/images/map_icon_taxi_stand.svg' },                    { 'name': '汽车站', 'src': '/common/mauna/images/map_icon_bus_station.svg' },                    { 'name': '火车站', 'src': '/common/mauna/images/map_icon_train_station.svg' },                    { 'name': '地铁', 'src': '/common/mauna/images/map_icon_subway_station.svg' },                ]            },            {                'title': '健康',                'data': [                    { 'name': '康复中心', 'src': '/common/mauna/images/map_icon_health.svg' },                    { 'name': '牙医', 'src': '/common/mauna/images/map_icon_dentist.svg' },                    { 'name': '医院', 'src': '/common/mauna/images/map_icon_hospital.svg' },                    { 'name': '诊所', 'src': '/common/mauna/images/map_icon_doctor.svg' },                ]            },            {                'title': '娱乐',                'data': [                    { 'name': '酒吧', 'src': '/common/mauna/images/map_icon_night_club.svg' },                    { 'name': '动物园', 'src': '/common/mauna/images/map_icon_zoo.svg' },                    { 'name': '购物街', 'src': '/common/mauna/images/map_icon_shopping_mall.svg' },                    { 'name': '电影院', 'src': '/common/mauna/images/map_icon_movie_theater.svg' },                ]            },            {                'title': '政府',                'data': [                    { 'name': '政府', 'src': '/common/mauna/images/map_icon_local_government.svg' },                    { 'name': '法院', 'src': '/common/mauna/images/map_icon_courthouse.svg' },                    { 'name': '消防站', 'src': '/common/mauna/images/map_icon_fire_station.svg' },                    { 'name': '警察局', 'src': '/common/mauna/images/map_icon_police.svg' },                ]            },        ],        clickFunc1: function(e) {            mauna_map_tool.close_all_tools();            mauna_map_tool.make_marker.add_marker_show({ event: 'add' });        },        clickFunc2: function(e) {            mauna_map_tool.make_marker.add_marker_hide(mauna_map_tool.make_marker.marker_temp);        },        callBack: function() {            var map_label_model = new parse.model(modelConfig['map_label']);            mauna_map_tool.make_marker.navigation.append('<div id="marker_tree"></div>');            mauna_map_tool.make_marker.init_marker_type();            mauna_map_tool.make_marker.init_marker_tree();            mauna_map_tool.map_container.append(mauna_map_tool.make_marker.add_marker_div);        },        init_marker_type: function() {            var icons_data = [];            var type_data = {                'class': 'point_type',                'order': ['createdAt'],                'limit': Number.MAX_SAFE_INTEGER,            };            var icon_data = {                'class': 'point_icon',                'order': ['createdAt'],                'limit': Number.MAX_SAFE_INTEGER,            }            var ajax1 = $.ajax({                url: mauna_map_tool.make_marker.marker_type_url,                method: 'POST',                dataType: 'json',                data: type_data,                success: function() {},            });            var ajax2 = $.ajax({                url: mauna_map_tool.make_marker.marker_type_url,                method: 'POST',                dataType: 'json',                data: icon_data,                success: function() {},            });            $.when(ajax1, ajax2).then(function(res1, res2) {                //debugger;                var types = (res1[0].state && res1[0].data) ? res1[0].data : [];                var icons = (res2[0].state && res2[0].data) ? res2[0].data : [];                types.forEach(function(element, index, array) {                    icons_data.push({ id: element._id, title: element.name, data: [] });                });                icons.forEach(function(icon, index, array) {                    var type_id = icon.point_type ? icon.point_type.objectId : null;                    if (type_id) {                        icons_data.forEach(function(element, index, array) {                            if (element.id == type_id) {                                element.data.push({ name: icon.name, src: icon.icon, id: icon._id });                            }                        });                    }                });                //debugger;                console.log(icons_data);                mauna_map_tool.make_marker.icon_data = icons_data;            });        },        init_marker_tree: function() {            if (mauna_map_tool.make_marker.marker_tree) return;            var options = {                "container": mauna_map_tool.make_marker.navigation.find('#marker_tree'),                "search": false,                "state": false,                "manage": false,                "select_callback": select_callback,                "ready_callback": ready_callback,                "checkbox": false,                "hover_check_click": false,                "group_type": "car_group",                "tree_type": "marker",                "tree_car_url": mauna_map_tool.make_marker.marker_tree_point_url,            };            mauna_map_tool.make_marker.marker_tree = new mauna.jstree(options);            mauna_map_tool.make_marker.marker_tree.init();            function select_callback(obj) {                setTimeout(function() {                    var tree = mauna_map_tool.make_marker.marker_tree.get_tree();                    if (obj.original.lng_lat) {                        var id = obj.original._id;                        /*                        var lng_lat = obj.original.lng_lat;                        var position = [Number(lng_lat[0]), Number(lng_lat[1])];                        mauna_map.setView(position, mauna_map_tool.map);*/                        mauna_map_tool.make_marker.active_marker(id, true);                        mauna_map_tool.map.setZoom(obj.original.display_level);                    } else {                        if (tree.maunajstree(true).is_open(obj)) {                            tree.maunajstree(true).close_node(obj);                        } else {                            tree.maunajstree(true).open_node(obj);                        }                        var node = tree.maunajstree(true).get_node(obj, true);                        node.find('>a').removeClass('jstree-clicked');                    }                }, 0);            }            function ready_callback(tree) {                $.ajax({                    url: mauna_map_tool.make_marker.marker_tree_point_url,                    method: 'POST',                    dataType: 'json',                    success: function(data) {                        console.log(data);                        if ($.isArray(data)) {                            for (var i = 0; i < data.length; i++) {                                if (data[i].type == 'tag') continue;                                var lng_lat = data[i].lng_lat;                                if (lng_lat && data[i].marker_icon != null) {                                    console.log(data[i]._id, data[i].marker_icon.icon);                                    tree.maunajstree(true).set_icon(data[i]._id, data[i].marker_icon.icon);                                    var position = [Number(lng_lat[1]), Number(lng_lat[0])];                                    if (!data[i].marker_icon) debugger                                    var html = '<div class="point-container"><img height="30" src="' + data[i].marker_icon.icon + '"><div data-id="' + data[i]._id + '" class="point-name">' + data[i].name + '</div></div>';                                    // var html = '<img height="30" src="'+data[i].marker_icon.icon+'"><div data-id="'+data[i]._id+'" class="marker-name">'+data[i].name+'</div>';                                    var img_options = {                                        html: html,                                        iconSize: [0, 0],                                        iconAnchor: [35, 26],                                        className: 'point-marker-div marker-div',                                    };                                    var marker = mauna_map.myIcon(mauna_map_tool.map, position, img_options, { autoPanPadding: [0, 100], zIndexOffset: 200 });                                    marker.data = data[i];                                    mauna_map_tool.make_marker.markers.push(marker);                                    mauna_map_tool.make_marker.markers_data[data[i]._id] = marker;                                    marker.on('click', function(e) {                                        //console.log('1',id);                                        var target = e.target;                                        var id = target.data._id;                                        mauna_map_tool.make_marker.active_marker(id);                                    });                                    mauna_map_tool.make_marker.MaxZIndex++;                                }                            }                            if (mauna_map_tool.setting.tools_control['marker']) {                                if (mauna_map_tool.setting.tools_control['cluster_marker']) {                                    mauna_map_tool.make_marker.open_cluster();                                } else {                                    mauna_map_tool.make_marker.show_markers();                                }                            } else {                                mauna_map_tool.make_marker.hide_markers();                            }                            if (mauna_map_tool.setting.tools_control['marker_range']) {                                mauna_map_tool.make_marker.show_range();                            } else {                                mauna_map_tool.make_marker.hide_range();                            }                        } else {                            mauna.tips('加载用户兴趣点失败', 'error');                        }                    }                });            }        },        refresh_marker_tree: function() {            if (!mauna_map_tool.make_marker.marker_tree) return;            var tree = mauna_map_tool.make_marker.marker_tree.get_tree();            tree.maunajstree(true).refresh();            tree.on('refresh.jstree', function() {                tree.maunajstree(true).open_all();            });        },        get_marker_tree: function() {            var _data = [];            var parents_type = {                'platform': true,                'company': true,            }            $.ajax({                url: mauna_map_tool.make_marker.marker_tree_url,                async: false,                method: 'POST',                dataType: 'json',                success: function(data) {                    if ($.isArray(data)) {                        for (var i = 0; i < data.length; i++) {                            if (parents_type[data[i].type]) data[i].state = { disabled: true };                            _data.push(data[i]);                        }                    }                },            });            return _data;        },        active_marker: function(marker_id, center) {            mauna_map_tool.make_marker.active_marker_id = marker_id;            var marker = mauna_map_tool.make_marker.markers_data[marker_id];            var map = mauna_map_tool.map;            var markers_cluster = mauna_map_tool.view_control.markers_cluster;            var data = marker.data;            var display_level_text;            var zoom;            var cluster_zoom;            console.warn('卡片', data);            if (data.parent) {                var type_node = mauna_map_tool.make_marker.marker_tree.get_tree().maunajstree(true).get_node(data.parent);            } else {                var type_node = mauna_map_tool.make_marker.marker_tree.get_tree().maunajstree(true).get_node(data.type);            }            if (mauna_map_tool.setting.tools_control['marker_range']) {                mauna_map_tool.make_marker.show_range();            } else {                mauna_map_tool.make_marker.hide_range();            }            $('.leaflet-marker-circle-' + marker._leaflet_id).remove();            $('.leaflet-marker-circle-active-' + marker._leaflet_id).remove();            var drawCircle = mauna_map.drawCircle(map, marker._latlng, { radius: data.radius_range, color: '#19ac9e', weight: 1, fillOpacity: 0.1, className: 'leaflet-marker-circle-active-' + marker._leaflet_id + ' leaflet-marker-circle' });            // console.log(drawCircle.toGeoJSON());            // mauna_map_tool.make_marker.markers_data[marker_id].circle = drawCircle;            switch (data.display_level) {                case 7:                    display_level_text = "省级（≥2）";                    zoom = 5;                    cluster_zoom = 5;                    break;                case 11:                    display_level_text = "市级（≥5）";                    zoom = 8;                    cluster_zoom = 8;                    break;                case 14:                    display_level_text = "区县（≥8）";                    zoom = 11;                    cluster_zoom = 11;                    break;                case 17:                    display_level_text = "街道（≥11）";                    zoom = 14;                    cluster_zoom = 14;                    break;            }            if (data.remarks == undefined) {                data.remarks = '';            }            if (data.address_details == undefined) {                data.address_details = '';            }            if (data.region == undefined) {                data.region = '';            }            var updatedTime = new Date(data._updated_at ? data._updated_at.sec * 1000 : data._updatedAt.iso).toLocaleString('chinese', { hour12: false }).replace(/\//g, '-');            if (!data.marker_icon.icon) {                $.ajax({                    url: '?app=data&controller=object&action=get&deep=true',                    method: 'POST',                    async: false,                    data: {                        'class': 'point_icon',                        '_id': data.marker_icon.objectId,                        '__type': "pointer",                    },                    dataType: 'json',                    success: function(res) {                        console.log(res);                        data.marker_icon.icon = res.data.icon;                        // console.log(data.marker_icon.icon,'返回图标');                    }                });            }            // console.log(data.marker_icon.icon,'卡片图标');            var content = '';            content += '<div class="marker-div">';            content += '<div class="marker-title"><img class="marker-title-icon" src="' + data.marker_icon.icon + '"><span class="marker-title-name">' + data.name + '</span><span class="marker-title-delete"></span><span class="marker-title-edit"></span><span class="marker-title-close"></span></div>';            content += '<div class="marker-content">';            content += '<div class="marker-content-rowA">';            content += '<div class="marker-content-name marker-content-column1">';            content += '<div class="marker-content-name-item">所属分组</div>';            content += '<div class="marker-content-name-item">名称</div>';            content += '<div class="marker-content-name-item">类型</div>';            content += '<div class="marker-content-name-item">经纬度</div>';            content += '<div class="marker-content-name-item">更新时间</div>';            content += '</div>';            content += '<div class="marker-content-value marker-content-column2">';            content += '<div class="marker-type marker-content-value-item">' + type_node.text + '</div>';            content += '<div class="marker-card-name marker-content-value-item">' + data.name + '</div>';            content += '<div class="marker-icon-type "><img class="marker-card-icon" src="' + data.marker_icon.icon + '">' + '</div>';            content += '<div class="marker-latlng marker-content-value-item">' + data.lng_lat[0].toString().substring(0, data.lng_lat[0].toString().indexOf(".") + 7) + ', ' + data.lng_lat[1].toString().substring(0, data.lng_lat[1].toString().indexOf(".") + 7) + '</div>';            content += '<div class="marker-radius_range marker-content-value-item">' + updatedTime + '</div>';            content += '</div>';            if (data.picture) {                content += '<div class="marker-content-pic"><img class="marker-content-picture" src="' + data.picture.url + '"><div class="marker-content-nopicture"></div></div>';            } else if (data.path) {                content += '<div class="marker-content-pic"><img class="marker-content-picture" src="' + data.path + '"><div class="marker-content-nopicture"></div></div>';            } else {                content += '<div class="marker-content-pic"><img class="marker-content-picture" src=" "><div class="marker-content-nopicture"></div></div>';            }            content += '</div>';            content += '<div class="marker-content-rowB">';            content += '<div class="marker-content-name marker-content-column1">';            content += '<div class="marker-content-name-item">半径范围</div>';            content += '<div class="marker-content-name-item">显示级别</div>';            content += '</div>';            content += '<div class="marker-content-value marker-content-column2">';            content += '<div class="marker-radius_range marker-content-value-item">' + data.radius_range + '米' + '</div>';            content += '<div class="marker-display_level marker-content-value-item">' + display_level_text + '</div>';            content += '</div>';            content += '<div class="marker-content-name marker-content-column3">';            content += '<div class="marker-content-name-item">备注</div>';            content += '</div>';            content += '<div class="marker-content-value marker-content-column4">';            content += '<div class="marker-remarks " name="remarks">' + data.remarks + '</div>';            content += '</div>';            content += '</div>';            content += '<div class="marker-content-rowC">';            content += '<div class="marker-content-name marker-content-column1">';            content += '<div class="marker-content-name-item">所在区域</div>';            content += '<div class="marker-content-name-item">详细地址</div>';            content += '</div>';            content += '<div class="marker-content-value marker-content-column2">';            content += '<div class="marker-region marker-content-value-item">' + data.region + '</div>';            content += '<div class="marker-address marker-content-value-item">' + data.address_details + '</div>';            content += '</div>';            content += '</div>';            content += '</div>';            var $content = $(content);            var $picture = $content.find(".marker-content-picture");            var $nopicture = $content.find(".marker-content-nopicture");            console.log("图片", $picture);            if (data.picture == '' || data.picture == undefined) {                $picture.css('display', 'none');                $nopicture.html("暂无图片");            }            $content.find('.marker-title-close').click(function() {                //debugger                marker.closePopup();                marker.unbindPopup();                close_btn.tooltip('destroy');                $('.cluster-marker-div').remove();                if (mauna_map_tool.setting.tools_control['marker_range']) {} else {                    $('.leaflet-marker-circle-' + marker._leaflet_id).remove();                }            })            $content.find('.marker-title-edit').click(function(id) {                var options = {                    event: 'edit',                    id: data._id,                };                mauna_map_tool.make_marker.add_marker_show(options);            })            $content.find('.marker-title-delete').click(function(id) {                var id = data._id;                var d = {                    title: '删除兴趣点',                    content: '确定删除所选兴趣点？'                }                mauna.confirm(d, function() {                    $.ajax({                        url: '?app=data&controller=object&action=delete',                        method: 'POST',                        dataType: 'json',                        data: {                            'class': 'map_label',                            '_id': id,                        },                        success: function(res) {                            if (res.status) {                                mauna.tips('删除成功', 'success');                                mauna_map_tool.make_marker.remove_marker(id);                                mauna_map_tool.make_marker.refresh_marker_tree();                            } else {                                mauna.tips('删除标注失败', 'error');                            }                        }                    });                });            })            var popup_options = {                closeButton: false,                offset: [0, -20],                autoClose: true,                maxWidth: 380,                closeOnClick: false,                //className: 'marker-div',            }            var cluster_popup_options = {                closeButton: false,                // offset: [0, -20],                autoClose: true,                maxWidth: 380,                closeOnClick: false,                className: 'cluster-marker-div',            }            var map_zoom = mauna_map_tool.map.getZoom();            if (center) {                if (map_zoom > zoom) {                    zoom = map_zoom;                }                mauna_map.setView(marker._latlng, mauna_map_tool.map, zoom);            } else {                var type = data.parent;                var id = data.id;                if (mauna_map_tool.make_marker.active_callback) {                    mauna_map_tool.make_marker.active_callback(id, type);                }            }            if (mauna_map_tool.map.hasLayer(marker)) {                if (marker.isPopupOpen()) {                    marker.closePopup();                    marker.unbindPopup();                    if (mauna_map_tool.setting.tools_control['marker_range']) {} else {                        $('.leaflet-marker-circle-active-' + marker._leaflet_id).remove();                    }                } else {                    // console.log('点的弹窗',marker);                    marker.unbindPopup();                    marker.bindPopup($content[0], popup_options).openPopup();                }            } else {                showPopup = mauna_map.showPopup(mauna_map_tool.map, [data.lng_lat[1], data.lng_lat[0]], $content[0], cluster_popup_options);                $('.leaflet-marker-circle-active-' + marker._leaflet_id).remove();                // console.log('聚合弹窗呀');            }            mauna_map_tool.map.on('zoomend', function(ev) {                var map_zoom = mauna_map_tool.map.getZoom();                if (map_zoom < cluster_zoom) {                    $('.cluster-marker-div').remove();                    // window.setTimeout("$('.cluster-marker-div').remove();",50)                }            });            // marker.on('add',function () {            //     if ($('.cluster-marker-div').length > 0 && (!marker.isPopupOpen())&& map.hasLayer(marker)) {            //         console.log('聚合消失',marker.data.name);            //         marker.unbindPopup();            //         marker.bindPopup($content[0], popup_options).openPopup();            //         $('.leaflet-marker-circle').show();            //     }            // });            marker.once('remove', function() {                console.log('点消失', marker._leaflet_id);                $('.leaflet-marker-circle-active-' + marker._leaflet_id).remove();            });            //debugger            marker.setZIndexOffset(mauna_map_tool.make_marker.MaxZIndex);            mauna_map_tool.make_marker.MaxZIndex = marker._zIndex + 1;            $content.width('380px');            var edit_btn = $content.find('.marker-title-edit');            var delete_btn = $content.find('.marker-title-delete');            var close_btn = $content.find('.marker-title-close');            var type = $content.find('.marker-type');            var name = $content.find('.marker-card-name');            var latlng = $content.find('.marker-latlng');            var radius_range = $content.find('.marker-radius_range');            var display_level = $content.find('.marker-display_level');            var region = $content.find('.marker-region');            var address = $content.find('.marker-address');            var remarks = $content.find('.marker-remarks');            edit_btn.tooltip({ title: '编辑', placement: 'bottom' });            delete_btn.tooltip({ title: '删除', placement: 'bottom' });            close_btn.tooltip({ title: '关闭', placement: 'bottom',container:'body'});            address.tooltip({ title: address.text(), placement: 'top' });            remarks.tooltip({ title: remarks.text(), placement: 'top' });            edit_btn.hover(function(){                edit_btn.css("background","url(/common/mauna/images/edit_hover.svg) no-repeat");            },function(){                edit_btn.css("background","url(/common/mauna/images/edit.svg) no-repeat");            });            delete_btn.hover(function(){                delete_btn.css("background","url(/common/mauna/images/delete_hover.svg) no-repeat");            },function(){                delete_btn.css("background","url(/common/mauna/images/delete.svg) no-repeat");            });            close_btn.hover(function(){                close_btn.css("background","url(/common/mauna/js/mauna.leaflet/dist/images/map_close_hover.svg) no-repeat");            },function(){                close_btn.css("background","url(/common/mauna/js/mauna.leaflet/dist/images/map_close.svg) no-repeat");            });        },        unactive_marker: function() {            if (mauna_map_tool.make_marker.active_marker_id) {                var marker = mauna_map_tool.make_marker.markers_data[mauna_map_tool.make_marker.active_marker_id];                marker.closePopup();            }        },        show_range: function(data) {            if (data) {                markers = data;            } else {                markers = mauna_map_tool.make_marker.markers;            }            var map = mauna_map_tool.map;            for (var i = 0; i < markers.length; i++) {                markers = mauna_map_tool.make_marker.markers;                var marker = markers[i];                var data = markers[i].data;                if (map.hasLayer(marker)) {                    $('.leaflet-marker-circle-active-' + marker._leaflet_id).remove();                    $('.leaflet-marker-circle-' + marker._leaflet_id).remove();                    mauna_map.drawCircle(map, marker._latlng, { radius: data.radius_range, color: '#19ac9e', weight: 1, fillOpacity: 0.1, className: 'leaflet-marker-circle-' + marker._leaflet_id + ' leaflet-marker-circle' });                }            }            map.on('zoomend', function(ev) {                if (mauna_map_tool.setting.tools_control['marker_range']) {                    for (var i = 0; i < markers.length; i++) {                        marker = markers[i];                        data = marker.data;                        if (map.hasLayer(marker)) {                            $('.leaflet-marker-circle-active-' + marker._leaflet_id).remove();                            $('.leaflet-marker-circle-' + marker._leaflet_id).remove();                            mauna_map.drawCircle(map, marker._latlng, {                                radius: data.radius_range,                                color: '#19ac9e',                                weight: 1,                                fillOpacity: 0.1,                                className: 'leaflet-marker-circle-' + marker._leaflet_id + ' leaflet-marker-circle'                            });                        } else {                            $('.leaflet-marker-circle-active-' + marker._leaflet_id).remove();                            $('.leaflet-marker-circle-' + marker._leaflet_id).remove();                        }                    }                }            });        },        hide_range: function() {            $('.leaflet-marker-circle').hide();        },        show_markers: function(data) {            if (data) {                markers = data;            } else {                markers = mauna_map_tool.make_marker.markers;            }            var map = mauna_map_tool.map;            var map_zoom = mauna_map_tool.map.getZoom();            var level;            var marker;            for (var i = 0; i < markers.length; i++) {                level = markers[i].data.display_level;                marker = markers[i];                if (map_zoom == 4) {                    marker.removeFrom(map);                } else if (map_zoom >= 5 && map_zoom < 8) {                    if (level == 7) {                        marker.addTo(map);                    } else {                        marker.removeFrom(map);                    }                } else if (map_zoom >= 8 && map_zoom < 11) {                    if (level !== 14 && level !== 17) {                        marker.addTo(map);                    } else {                        marker.removeFrom(map);                    }                } else if (map_zoom >= 11 && map_zoom < 14) {                    if (level !== 17) {                        marker.addTo(map);                    } else {                        marker.removeFrom(map);                    }                } else if (map_zoom >= 14) {                    marker.addTo(map);                }            }            if (mauna_map_tool.setting.tools_control['marker_range']) {                mauna_map_tool.make_marker.show_range();            }            map.on('zoomend', function(ev) {                var markers;                var map_zoom = mauna_map_tool.map.getZoom();                console.log('层级改变', map_zoom);                if (data) {                    markers = data;                } else {                    markers = mauna_map_tool.make_marker.markers;                }                if (mauna_map_tool.setting.tools_control['marker']) {                    if (mauna_map_tool.setting.tools_control['cluster_marker']) {} else {                        for (var i = 0; i < markers.length; i++) {                            level = markers[i].data.display_level;                            marker = markers[i];                            if (map_zoom == 4) {                                marker.removeFrom(map);                            } else if (map_zoom >= 5 && map_zoom < 8) {                                if (level == 7) {                                    marker.addTo(map);                                } else {                                    marker.removeFrom(map);                                }                            } else if (map_zoom >= 8 && map_zoom < 11) {                                if (level !== 14 && level !== 17) {                                    marker.addTo(map);                                } else {                                    marker.removeFrom(map);                                }                            } else if (map_zoom >= 11 && map_zoom < 14) {                                if (level !== 17) {                                    marker.addTo(map);                                } else {                                    marker.removeFrom(map);                                }                            } else if (map_zoom >= 14) {                                marker.addTo(map);                            }                        }                    }                } else {                    mauna_map_tool.make_marker.hide_markers();                }            });        },        hide_markers: function() {            var markers;            var map = mauna_map_tool.map;            markers = mauna_map_tool.make_marker.markers;            for (var i = 0; i < markers.length; i++) {                var marker = markers[i];                marker.removeFrom(map);            }            mauna_map_tool.make_marker.hide_range();        },        open_cluster: function() {            var markers = mauna_map_tool.make_marker.markers;            var map = mauna_map_tool.map;            if ($.isArray(markers)) {                var options = {                    uniqueName: 'marker-cluster-point'                };                mauna_map_tool.view_control.markers_cluster = mauna_map.addCluster(markers, map, options);                console.log('聚合', mauna_map_tool.view_control.markers_cluster);                var map_zoom = mauna_map_tool.map.getZoom();                for (var i = 0; i < markers.length; i++) {                    var level = markers[i].data.display_level;                    marker = markers[i];                    if (map_zoom == 4) {                        mauna_map_tool.view_control.markers_cluster.removeLayers([marker]);                    } else if (map_zoom >= 5 && map_zoom < 8) {                        if (level == 7) {                            mauna_map_tool.view_control.markers_cluster.addLayers([marker]);                        } else {                            mauna_map_tool.view_control.markers_cluster.removeLayers([marker]);                        }                    } else if (map_zoom >= 8 && map_zoom < 11) {                        if (level !== 14 && level !== 17) {                            mauna_map_tool.view_control.markers_cluster.addLayers([marker]);                        } else {                            mauna_map_tool.view_control.markers_cluster.removeLayers([marker]);                        }                    } else if (map_zoom >= 11 && map_zoom < 14) {                        if (level !== 17) {                            mauna_map_tool.view_control.markers_cluster.addLayers([marker]);                        } else {                            mauna_map_tool.view_control.markers_cluster.removeLayers([marker]);                        }                    } else if (map_zoom >= 14) {                        mauna_map_tool.view_control.markers_cluster.addLayers([marker]);                    }                }                if (mauna_map_tool.setting.tools_control['marker_range']) {                    mauna_map_tool.make_marker.show_range();                }            }            map.on('zoomend', function(ev) {                var map_zoom = mauna_map_tool.map.getZoom();                if (mauna_map_tool.setting.tools_control['cluster_marker']) {                    for (var i = 0; i < markers.length; i++) {                        var level = markers[i].data.display_level;                        marker = markers[i];                        if (map_zoom == 4) {                            mauna_map_tool.view_control.markers_cluster.removeLayers([marker]);                        } else if (map_zoom >= 5 && map_zoom < 8) {                            if (level == 7) {                                mauna_map_tool.view_control.markers_cluster.addLayers([marker]);                            } else {                                mauna_map_tool.view_control.markers_cluster.removeLayers([marker]);                            }                        } else if (map_zoom >= 8 && map_zoom < 11) {                            if (level == 7 || level == 11) {                                mauna_map_tool.view_control.markers_cluster.addLayers([marker]);                            } else {                                mauna_map_tool.view_control.markers_cluster.removeLayers([marker]);                            }                        } else if (map_zoom >= 11 && map_zoom < 14) {                            if (level !== 17) {                                mauna_map_tool.view_control.markers_cluster.addLayers([marker]);                            } else {                                mauna_map_tool.view_control.markers_cluster.removeLayers([marker]);                            }                        } else if (map_zoom >= 14) {                            mauna_map_tool.view_control.markers_cluster.addLayers([marker]);                        }                    }                }            });        },        close_cluster: function() {            var markers = mauna_map_tool.make_marker.markers;            var map = mauna_map_tool.map;            var map_zoom = mauna_map_tool.map.getZoom();            var level;            if ($.isArray(markers)) {                if (mauna_map_tool.view_control.markers_cluster) {                    mauna_map_tool.view_control.markers_cluster.remove();                    for (var i = 0; i < markers.length; i++) {                        level = markers[i].data.display_level;                        if (map_zoom >= 5 && map_zoom < 8) {                            if (level == 7) {                                map.addLayer(markers[i]);                            }                        } else if (map_zoom >= 8 && map_zoom < 11) {                            if (level == 7 || level == 11) {                                map.addLayer(markers[i]);                            }                        } else if (map_zoom >= 11 && map_zoom < 14) {                            if (level !== 17) {                                map.addLayer(markers[i]);                            }                        } else if (map_zoom >= 14) {                            map.addLayer(markers[i]);                        }                    }                    if (mauna_map_tool.setting.tools_control['marker_range']) {                        mauna_map_tool.make_marker.show_range();                    }                }            }        },        add_marker: function(data) {            if ($.isArray(data)) {                for (var i = 0; i < data.length; i++) {                    var _data = data[i];                    $.ajax({                        url: '?app=data&controller=object&action=get&deep=true',                        method: 'POST',                        data: {                            'class': 'point_icon',                            '_id': _data.marker_icon.objectId,                            '__type': "pointer",                        },                        async: false,                        dataType: 'json',                        success: function(res) {                            console.log(res);                            _data.marker_icon.icon = res.data.icon;                            // _data.marker_icon.point_type=res.data.point_type                        }                    });                    // var html = '<div class="point-container"><img height="30" src="'+_data.marker_icon.icon+'"><div data-id="'+_data._id+'" class="point-name">'+_data.name+'</div></div>';                    var html = '<img height="30" src="' + _data.marker_icon.icon + '"><div class="marker-name">' + _data.name + '</div>';                    var options = {                        html: html,                        iconSize: [70, 48],                        iconAnchor: [35, 26],                        className: 'marker-div',                    };                    var position = [_data.lng_lat[1], _data.lng_lat[0]];                    var marker = mauna_map.myIcon(mauna_map_tool.map, position, options, { zIndexOffset: 200 });                    marker.data = _data;                    mauna_map_tool.make_marker.markers.push(marker);                    mauna_map_tool.make_marker.markers_data[_data._id] = marker;                    marker.on('click', function(e) {                        // console.log('3');                        var target = e.target;                        var id = target.data._id;                        mauna_map_tool.make_marker.active_marker(id);                    });                    mauna_map_tool.make_marker.MaxZIndex++;                    if (mauna_map_tool.view_control.markers_cluster) {                        mauna_map.addToCluster(mauna_map_tool.map, [marker], mauna_map_tool.view_control.markers_cluster);                        $('.leaflet-marker-circle-active-' + marker._leaflet_id).remove();                        $('.leaflet-marker-circle-' + marker._leaflet_id).remove();                    }                }            }        },        remove_marker: function(id) {            var markers = mauna_map_tool.make_marker.markers;            var markers_data = mauna_map_tool.make_marker.markers_data;            var map = mauna_map_tool.map;            for (var i = 0; i < markers.length; i++) {                var marker = markers[i];                if (marker.data._id == id) {                    if (mauna_map_tool.view_control.markers_cluster) mauna_map.removeFromCluster(mauna_map_tool.map, [marker], mauna_map_tool.view_control.markers_cluster);                    marker.removeFrom(map);                    markers.splice(i, 1);                    markers_data[id] = null;                }            }            if (mauna_map_tool.setting.tools_control['marker_range']) {                mauna_map_tool.make_marker.show_range();            }        },        add_marker_show: function(options) {            mauna_map_tool.close_all_tools();            $(document).find('.make_marker').attr('data-picture', 1);            var map = mauna_map_tool.map;            var _this = mauna_map_tool.make_marker;            var default_template = '<div class="col-md-12" style="margin:50px 5px;text-align: center; color: #999999;">请点击地图</div>';            var default_img_html = '<img height="30" src="common/mauna/images/map_label_default_normal.svg"><div class="marker-name">兴趣点名称</div>';            var default_img = {                html: default_img_html,                iconSize: [70, 48],                iconAnchor: [35, 26],                className: 'marker-div',            };            var _event = options.event;            _this.add_marker_div.show();            if (_event == 'add') {                _this.add_marker_div.html(_this.add_template);                _this.add_marker_div.append(default_template);                _this.add_marker_div.find('.close_marker').click(function() {                    _this.add_marker_hide(marker, {});                });                var marker = mauna_map.myIcon(mauna_map_tool.map, [30, 104], default_img, { zIndexOffset: _this.MaxZIndex + 200 });                mauna_map_tool.make_marker.marker_temp = marker;                var tips = marker.bindTooltip(_this.create_tooltip, _this.tooltip_options);                map.on('mousemove', function(event) {                    marker.setLatLng(event.latlng);                });                var marker_data = {};                var node = options.node;                var type = options.type;                if (node && node.type && (node.type == 'company' || node.type == 'platform')) {                    marker_data.type = ''                } else {                    marker_data.type = type;                }                map.on('click', function(event) {                    // console.warn(marker,'添加点')                    marker.setLatLng(event.latlng);                    mauna_map.drawCircle(mauna_map_tool.map, event.latlng, { radius: 1000, color: '#19ac9e', weight: 1, fillOpacity: 0.1, className: 'leaflet-marker-circle-' + marker._leaflet_id + ' leaflet-marker-circle' });                    marker.unbindTooltip();                    var location = mauna_map.location(event.latlng);                    console.log(location);                    map.off('mousemove');                    map.off('click');                    _this.add_marker_div.html(_this.add_template)                    // if (location.regeocode.addressComponent.country == '') {                    //     mauna.tips('该地图不支持', 'warn');                    //     _this.add_marker_hide(marker, marker_data);                    // } else {                    _this.show_form(_event, _this.add_marker_div, marker, marker_data);                    // }                });            } else if (_event == 'edit') {                var id = options.id;                var marker = mauna_map_tool.make_marker.markers_data[id];                var marker_data = marker.data;                _this.add_marker_div.html(_this.edit_template);                _this.add_marker_div.append(default_template);                mauna_map_tool.make_marker.marker_temp = marker;                _this.show_form(_event, _this.add_marker_div, marker, marker_data);                _this.add_marker_div.find('.close_marker').click(function() {                    _this.add_marker_hide(null, {});                    marker.unbindTooltip(); //关闭拖动提示                    marker.unbindTooltip();                });            }        },        add_marker_hide: function(marker, marker_data) {            var _this = mauna_map_tool.make_marker;            if (_this) {                _this.add_marker_div.hide();            }            if (!marker) {                marker = mauna_map_tool.make_marker.marker_temp;            }            if (marker) {                marker.off('mouseover');                marker.off('mouseout');                marker.off('dragend');                marker.off('drag');                if (marker.dragging) marker.dragging.disable();            }            if ($.isEmptyObject(marker_data) || !marker_data._id) {                if (marker) mauna_map.removeMarker(marker);            }            mauna_map_tool.make_marker.marker_temp = null;            mauna_map_tool.map.off('click');            mauna_map_tool.map.off('mousemove');            $('.make_marker>i').removeClass('font-active');            $('.make_marker').attr('data-picture', 0);        },        show_form: function(event, form_div, marker, marker_data) {            // console.warn('表单',marker._leaflet_id);            var form_zoom = 11;            var map_zoom = mauna_map_tool.map.getZoom();            var form_zoom;            if (map_zoom >= 4 && map_zoom <= 7) {                form_zoom = 7;            } else if (map_zoom >= 8 && map_zoom <= 10) {                form_zoom = 11;            } else if (map_zoom >= 11 && map_zoom <= 13) {                form_zoom = 14;            } else if (map_zoom >= 14) {                form_zoom = 17;            }            var _this = mauna_map_tool.make_marker;            var action;            if (event == 'add') {                action = 'create';                form_div.html(_this.add_template);            } else {                action = 'update';                form_div.html(_this.edit_template);            }            _this.add_marker_div.find('.close_marker').click(function() {                _this.add_marker_hide(marker, marker_data);                $('.leaflet-marker-circle-' + marker._leaflet_id).remove();            });            var latlng = [marker._latlng.lng.toString().substring(0, marker._latlng.lng.toString().indexOf(".") + 7), marker._latlng.lat.toString().substring(0, marker._latlng.lat.toString().indexOf(".") + 7)];            var location = _this.location([marker._latlng.lat, marker._latlng.lng]);            var picture = marker_data.picture;            var path = (picture && picture.url) ? picture.url : "";            console.log('弹窗', marker_data);            var form_data = [{                'form_name': 'type',                'type': 'selecttree',                'display_name': '所属分组',                'data': mauna_map_tool.make_marker.get_marker_tree(),                'multi': false,                'value': marker_data.parent ? marker_data.parent : marker_data.type,                // 'require': true,                'class': 'user_marker_type',            }, {                'form_name': 'marker_name',                'type': 'input',                'after': '',                'display_name': "名称",                'value': marker_data.name ? marker_data.name : '兴趣点名称',                // 'require': true,                'class': 'user_marker_name',            }, {                'form_name': 'marker_icon',                'id': '',                'type': 'select_picture',                'after': '',                'display_name': "图标",                'data': _this.icon_data,                'value': marker_data.marker_icon ? marker_data.marker_icon.icon : '',                'value_id': marker_data.marker_icon ? marker_data.marker_icon._id : '',                // 'require': true,                'class': 'user_marker_icon',            }, {                'form_name': 'lng_lat',                'id': '',                'type': 'input',                'after': '',                'value': latlng[0].toString(),                'display_name': "经度",                'class': 'user_marker_lng',            }, {                'form_name': 'lng_lat',                'id': '',                'type': 'input',                'after': '',                'value': latlng[1].toString(),                'display_name': "纬度",                'class': 'user_marker_lat',            }, {                'form_name': 'region',                'id': 'region',                'type': 'input',                'after': '',                'value': marker_data.region ? marker_data.region : location.region,                'display_name': "所在区域",                'class': 'user_marker_region'            }, {                'form_name': 'detail_address',                'type': 'input',                'after': '',                'display_name': "详细地址",                'value': marker_data.address_details ? marker_data.address_details : location.address_details,                'class': 'user_marker_address',            }, {                'form_name': 'radius_range',                'type': 'number',                'after': ' 米',                'display_name': "半径范围",                'value': marker_data.radius_range ? marker_data.radius_range : '1000',                // 'require': true,                'min': 1,                'class': 'user_marker_radius_range',            }, {                'form_name': 'display_level',                'type': 'select',                'after': '',                'display_name': "显示级别",                'value': marker_data.display_level ? marker_data.display_level : form_zoom,                // 'require': true,                'data': [{                    'name': '街道（≥11）',                    'value': '17'                }, {                    'name': '区县（≥8）',                    'value': '14'                }, {                    'name': '市级（≥5）',                    'value': '11'                }, {                    'name': '省级（≥2）',                    'value': '7'                }],                'width': '263px',                'class': 'user_marker_display_level',            }, {                'form_name': 'picture',                'type': 'picPicker',                'display_name': '图片',                'saveType': 'id',                'isthumb': true,                'value': marker_data.picture ? marker_data.picture : path,            }, {                'form_name': 'remarks',                'value': marker_data.remarks ? marker_data.remarks : '',                'type': 'textarea',                'rows': 3,                'display_name': "备注"            }, {                'type': 'html',                'after': '',                'display_name': "",                'html': '<button id="marker_submit_button" class="btn btn-primary btn-sm center-block">保存</button>'            }, ];            form_div.mauna_form(form_data);            console.log('新加点', marker);            if (marker.dragging) marker.dragging.enable();            var lng_text = form_div.find('.user_marker_lng');            var lat_text = form_div.find('.user_marker_lat');            var region_text = form_div.find('.user_marker_region');            var address_text = form_div.find('.user_marker_address');            var radius_range = form_div.find('.user_marker_radius_range');            var name_text = form_div.find('input[name=marker_name]');            var save_button = form_div.find('#marker_submit_button');            var icon_text = form_div.find('input[name=marker_icon]');            radius_range.css({ 'width': '95px' });            $('.select-pic-parent').css({ 'height': 'auto', 'vertical-align': 'top' });            // $('.select-pic-parent>span').css('height','34px');            $(".mauna-form-parent .form-control").css({ 'display': 'inline-block', 'font-size': '13px' });            $(".user_marker_lng").parent().parent().css({ 'width': '169px', 'float': 'left', 'display': 'inline-block' });            $(".user_marker_lat").parent().parent().css({ 'width': '169px', 'float': 'left', 'display': 'inline-block' });            $(".user_marker_lng").parent().css('cssText', 'width:95px !important');            $(".user_marker_lat").parent().css('cssText', 'width:95px !important');            $('.add_marker .lava-label').eq(0).after("<span class='c_red_require'>*</span>");            $('.add_marker .lava-label').eq(1).after("<span class='c_red_require'>*</span>");            $('.add_marker .lava-label').eq(2).after("<span class='c_red_require'>*</span>");            $('.add_marker .lava-label').eq(3).after("<span class='c_red_require'></span>");            $('.add_marker .lava-label').eq(4).after("<span class='c_red_require'></span>");            $('.add_marker .lava-label').eq(5).after("<span class='c_red_require'></span>");            $('.add_marker .lava-label').eq(6).after("<span class='c_red_require'></span>");            $('.add_marker .lava-label').eq(7).after("<span class='c_red_require'>*</span>");            $('.add_marker .lava-label').eq(8).after("<span class='c_red_require'>*</span>");            $('.add_marker .lava-label').eq(9).after("<span class='c_red_require'></span>");            $('.add_marker .lava-label').eq(10).after("<span class='c_red_require'></span>");            $('.add_marker .lava-label').eq(11).after("<span class='c_red_require'></span>");            name_text.on('keyup', function() {                var name = $(this).val();                var marker_name = $(marker._icon).find('.marker-name');                marker_name.html(name);                marker_name.css('transform', 'translateX(-' + (marker_name.width() - 58) / 2 + 'px)');            });            $('.user_marker_lng').bind('input propertychange', function() {                marker.setLatLng([lat_text.val(), lng_text.val()]);                var location = _this.location([lat_text.val(), lng_text.val()]);                region_text.val(location.region);                address_text.val(location.address_details);                // if (location.region=='') {                //     mauna.tips('该地图不支持', 'warn');                // }                $('.leaflet-marker-circle-active-' + marker._leaflet_id).remove();                $('.leaflet-marker-circle-' + marker._leaflet_id).remove();                mauna_map.drawCircle(mauna_map_tool.map, [lat_text.val(), lng_text.val()], { radius: radius_range.val(), color: '#19ac9e', weight: 1, fillOpacity: 0.1, className: 'leaflet-marker-circle-' + marker._leaflet_id + ' leaflet-marker-circle' });                mauna_map.setView([lat_text.val(), lng_text.val()], mauna_map_tool.map);            });            $('.user_marker_lat').bind('input propertychange', function() {                marker.setLatLng([lat_text.val(), lng_text.val()]);                var location = _this.location([lat_text.val(), lng_text.val()]);                region_text.val(location.region);                address_text.val(location.address_details);                $('.leaflet-marker-circle-active-' + marker._leaflet_id).remove();                $('.leaflet-marker-circle-' + marker._leaflet_id).remove();                mauna_map.drawCircle(mauna_map_tool.map, [lat_text.val(), lng_text.val()], { radius: radius_range.val(), color: '#19ac9e', weight: 1, fillOpacity: 0.1, className: 'leaflet-marker-circle-' + marker._leaflet_id + ' leaflet-marker-circle' });                mauna_map.setView([lat_text.val(), lng_text.val()], mauna_map_tool.map);            });            // marker.on('mouseover', function(e){            var tips = marker.bindTooltip(_this.move_tooltip, _this.tooltip_options);            // });            // marker.on('mouseout', function(e){            //     marker.unbindTooltip();            // });            $('.user_marker_radius_range').bind('input propertychange', function() {                $('.leaflet-marker-circle-active-' + marker._leaflet_id).remove();                $('.leaflet-marker-circle-' + marker._leaflet_id).remove();                mauna_map.drawCircle(mauna_map_tool.map, marker._latlng, { radius: radius_range.val(), color: '#19ac9e', weight: 1, fillOpacity: 0.1, className: 'leaflet-marker-circle-' + marker._leaflet_id + ' leaflet-marker-circle' });            });            marker.on('drag', function(e) {                // marker.unbindTooltip();                $('.leaflet-marker-circle-active-' + marker._leaflet_id).remove();                $('.leaflet-marker-circle-' + marker._leaflet_id).remove();                mauna_map.drawCircle(mauna_map_tool.map, marker._latlng, { radius: radius_range.val(), color: '#19ac9e', weight: 1, fillOpacity: 0.1, className: 'leaflet-marker-circle-' + marker._leaflet_id + ' leaflet-marker-circle' });            });            marker.on('dragend', function(e) {                var latlng = marker._latlng;                var location = _this.location(latlng);                lng_text.val([latlng.lng.toString().substring(0, latlng.lng.toString().indexOf(".") + 7)].toString());                lat_text.val([latlng.lat.toString().substring(0, latlng.lat.toString().indexOf(".") + 7)].toString());                // if (location.region=='') {                //     mauna.tips('该地图不支持', 'warn');                // }                region_text.val(location.region);                address_text.val(location.address_details);            });            save_button.on('click', function() {                _this.submit_form(form_div, marker, action);            });            icon_text.on('change', function() {                var icon = $(this).attr('data-src');                var marker_icon = $(marker._icon).find('img');                marker_icon.attr('src', icon);            });        },        submit_form: function(form_div, marker, action) {            var item = {};            var url = '?app=data&controller=object&action=create';            if (action == 'update') {                item._id = marker.data._id;                url = '?app=data&controller=object&action=update';            }            // item.uid = uid;            item.type = form_div.find('input#type').val();            item.name = form_div.find('input[name=marker_name]').val();            var position = marker._latlng;            item.lng_lat = {                __type: "GeoPoint",                latitude: position.lat,                longitude: position.lng,            };            item.region = form_div.find('#region').val();            item.address_details = form_div.find('input[name=detail_address]').val();            item.radius_range = Number(form_div.find('input[name=radius_range]').val());            item.display_level = Number(form_div.find('input[name=display_level]').val());            item.picture = { __type: "Picture", objectId: form_div.find('input[name=picture]').val() };            item.remarks = form_div.find('textarea[name=remarks]').val();            item.marker_icon = {                '__type': 'Pointer',                'className': 'point_icon',                'objectId': form_div.find('input[name=marker_icon]').val() ? form_div.find('input[name=marker_icon]').val() : marker.data.marker_icon.objectId,            }            //debugger            if (item.name == '' || item.type == '' || item.marker_icon == '' || item.radius_range == '' || item.display_level == '') {                console.log('return');                mauna.tips('必须填写所有必填项', 'warn');                return;            }            var type_node = mauna_map_tool.make_marker.marker_tree.get_tree().maunajstree(true).get_node(item.type);            if (type_node.type == 'company') {                console.log('return');                mauna.tips('只能在兴趣点分组下添加兴趣点', 'warn');                return;            }            if (item.type == '') {                console.log('return');                mauna.tips('必须选择兴趣点分组', 'warn');                return;            }            var picture = form_div.find('input[name=picture]').val();            var picture_path;            if (picture) {                picture_path = form_div.find('img#' + picture).attr('src');            }            var jsondata = JSON.stringify({                'class': 'map_label',                'data': item,            });            console.log(jsondata, item);            $.ajax({                type: 'POST',                url: url, //替换为后端接口                data: jsondata,                dataType: 'json',                success: function(res) {                    console.log('save_marker', res);                    var tree = mauna_map_tool.make_marker.marker_tree.get_tree();                    if (res.status) {                        $.ajax({                            type: 'POST',                            url: '?app=data&controller=object&action=find',                            data: {                                'class': 'map_label',                                'include': ['picture', 'marker_icon'],                                'where': {                                    '_id': res.data._id,                                },                            },                            dataType: 'json',                            success: function(res) {                                if (res.state || res.status) {                                    mauna.tips('保存成功', 'success');                                    console.log('保存成功', marker);                                    marker.unbindTooltip(); //关闭拖动提示                                    mauna_map_tool.make_marker.MaxZIndex++;                                    mauna_map_tool.make_marker.refresh_marker_tree();                                    //ready_callback(tree);                                    var data = res.data[0];                                    if (mauna_map_tool.make_marker.save_callback) mauna_map_tool.make_marker.save_callback(data.type);                                    if (marker) {                                        //marker.options.icon.options.html = '<img height="30" src="'+data.marker_icon.icon+'"><div class="marker-name">'+data.name+'</div>';                                        //                                        // var html = '<div class="point-container"><img height="30" src="'+data.marker_icon.icon+'"><div class="point-name">'+data.name+'</div></div>';                                        var html = '<img height="30" src="' + data.marker_icon.icon + '"><div class="marker-name">' + data.name + '</div>';                                        var options = {                                            html: html,                                            iconSize: [70, 48],                                            iconAnchor: [35, 26],                                            className: 'marker-div',                                        };                                        marker = mauna_map.changeIcon(marker, [data.lng_lat[1], data.lng_lat[0]], options);                                        mauna_map_tool.make_marker.add_marker_hide(marker, data);                                        if (mauna_map_tool.make_marker.markers_data[data._id]) {                                            mauna_map_tool.make_marker.markers_data[data._id].data = data;                                        } else {                                            if (picture_path) data.picture.url = picture_path;                                            marker.data = data;                                            mauna_map_tool.make_marker.markers.push(marker);                                            mauna_map_tool.make_marker.markers_data[data._id] = marker;                                            marker.on('click', function() {                                                var id = data._id;                                                console.log('2', id);                                                $('.leaflet-marker-circle-' + marker._leaflet_id).remove();                                                mauna_map_tool.make_marker.active_marker(id);                                            });                                            var map_zoom = mauna_map_tool.map.getZoom();                                            var map = mauna_map_tool.map;                                            var level = marker.data.display_level;                                            if (mauna_map_tool.setting.tools_control['cluster_marker']) {                                                // var markers = mauna_map_tool.make_marker.markers;                                                // if ($.isArray(markers)) {                                                //     var options = {                                                //         uniqueName: 'marker-cluster-point'                                                //     };                                                //     // mauna_map_tool.view_control.markers_cluster = mauna_map.addCluster(markers, mauna_map_tool.map, options);                                                // }                                                if (map_zoom == 4) {} else if (map_zoom >= 5 && map_zoom < 8) {                                                    if (level == 7) {                                                        mauna_map.addToCluster(map, [marker], mauna_map_tool.view_control.markers_cluster);                                                    } else {                                                        marker.removeFrom(map);                                                    }                                                } else if (map_zoom >= 8 && map_zoom < 11) {                                                    if (level !== 14 && level !== 17) {                                                        mauna_map.addToCluster(map, [marker], mauna_map_tool.view_control.markers_cluster);                                                    } else {                                                        marker.removeFrom(map);                                                    }                                                } else if (map_zoom >= 11 && map_zoom < 14) {                                                    if (level !== 17) {                                                        mauna_map.addToCluster(map, [marker], mauna_map_tool.view_control.markers_cluster);                                                    } else {                                                        marker.removeFrom(map);                                                    }                                                } else if (map_zoom >= 14) {                                                    mauna_map.addToCluster(map, [marker], mauna_map_tool.view_control.markers_cluster);                                                }                                            } else if (mauna_map_tool.setting.tools_control['marker']) {                                                for (var i = 0; i < markers.length; i++) {                                                    level = markers[i].data.display_level;                                                    marker = markers[i];                                                    if (map_zoom == 4) {                                                        marker.removeFrom(map);                                                    } else if (map_zoom >= 5 && map_zoom < 8) {                                                        if (level == 7) {                                                            marker.addTo(map);                                                        } else {                                                            marker.removeFrom(map);                                                        }                                                    } else if (map_zoom >= 8 && map_zoom < 11) {                                                        if (level !== 14 && level !== 17) {                                                            marker.addTo(map);                                                        } else {                                                            marker.removeFrom(map);                                                        }                                                    } else if (map_zoom >= 11 && map_zoom < 14) {                                                        if (level !== 17) {                                                            marker.addTo(map);                                                        } else {                                                            marker.removeFrom(map);                                                        }                                                    } else if (map_zoom >= 14) {                                                        marker.addTo(map);                                                    }                                                }                                            }                                            if (!map.hasLayer(marker)) {                                                $('.leaflet-marker-circle-' + marker._leaflet_id).remove();                                            }                                            if (mauna_map_tool.setting.tools_control['marker_range']) {                                                mauna_map_tool.make_marker.show_range();                                            }                                            marker.once('remove', function() {                                                $('.leaflet-marker-circle-' + marker._leaflet_id).remove();                                            });                                        }                                    } else {                                        mauna_map_tool.make_marker.add_marker_hide(null, data);                                    }                                } else {                                    mauna.tips('保存失败', 'error');                                }                            }                        })                    } else {                        mauna.tips('保存失败', 'error');                    }                }            });        },        location: function(lgnlat) {            var location = mauna_map.location(lgnlat);            console.log(location);            var address = location.regeocode.addressComponent;            var address_details = location.regeocode.formatted_address;            console.log(address_details);            var province = address.province;            var city = address.city;            var country = address.country;            var district = address.district;            var seaArea = address.seaArea;            var region = province + city + district;            if (location.regeocode.formatted_address == '') {                if (country == '') {                    region = '';                } else {                    region = seaArea;                }                address_details = '';            } else {                address_details = address_details.replace(region, '');            }            return { 'region': region, 'address_details': address_details };        }    },    // 采集位置    location: {        className: 'location',        template: '<li data-picture="0" class="location" data-state="0"><i class="map-icon map-location" data-placement="auto bottom" data-toggle="tooltip" title="" data-original-title="采集位置" ></i></li>',        marker: null,        clickFunc1: function(e) {            mauna_map_tool.close_all_tools();            mauna_map_tool.location.activeFunc();            /*if ($(e.target).hasClass('map-location')) {                if ($(document).find('.location').attr('data-picture') == 1) {                } else {                    mauna_map_tool.location.closeFunc();                }            } else {                e.stopPropagation();            }            */        },        clickFunc2: function(e) {            mauna_map_tool.location.closeFunc();        },        callBack: function() {},        activeFunc: function() {            var map = mauna_map_tool.map;            var _this = mauna_map_tool.location;            var tooltip_template = '点击获取位置';            var tooltip_options = {                permanent: true,                offset: [14, -12],                direction: 'right',            };            var default_img_html = '<img width=18 src="common/mauna/images/location_marker.png">';            var default_img = {                html: default_img_html,                iconSize: [70, 21],                iconAnchor: [34, 20],                className: 'marker-div',            };            var popup_options = {                closeButton: true,                className: 'location_tip card-div-border',                offset: [0, -8],                closeOnClick: false,                maxWidth: 380,            };            _this.marker = mauna_map.myIcon(mauna_map_tool.map, [30, 104], default_img, { zIndexOffset: 200 });            var tips = _this.marker.bindTooltip(tooltip_template, tooltip_options);            map.on('mousemove', function(event) {                _this.marker.setLatLng(event.latlng);            });            map.on('click', function(event) {                var latlng = event.latlng;                var location = mauna_map.location(latlng);                var content = '';                content += '<div class="location-item"><label class="location-label">经度</label><span class="location-span-number">' + latlng.lng + '</span></div>';                content += '<div class="location-item"><label class="location-label">纬度</label><span class="location-span-number">' + latlng.lat + '</span></div>';                content += '<div class="location-item"><label class="location-label">地址</label><span class="location-span">' + location.regeocode.formatted_address + '</span></div>';                content += '<div class="location-tri"></div>';                var $content = $(content);                _this.marker.setLatLng(latlng);                _this.marker.unbindTooltip();                _this.marker.bindPopup(content, popup_options).openPopup().on('popupopen', function(e) {                    $('.leaflet-popup-tip-container').hide();                });                _this.marker.bindPopup(content, popup_options).openPopup().on('popupclose', function(e) {                    _this.closeFunc();                });                $('.location>i').removeClass('font-active');                $('.location').attr('data-picture', 0);                map.off('mousemove');                map.off('click');            });        },        closeFunc: function() {            //debugger            if (mauna_map_tool.location.marker) {                if (mauna_map_tool.location.marker._popup) {                    //debugger                    //mauna_map_tool.location.marker._popup.remove();                    //mauna_map_tool.location.marker.unbindPopup();                }                mauna_map.removeMarker(mauna_map_tool.location.marker);            }        },    },    region: {        className: 'region_selection',        template: '<li style="border-left: none;" data-picture="0" class="region_selection" data-state="0"><i class="map-icon map-region" data-placement="auto bottom" data-toggle="tooltip" title="" data-original-title="区域监控"></i></li>',        clickFunc1: function(e) {            mauna_map_tool.close_all_tools();            mauna_map.startPolygon();        },        clickFunc2: function(e) {            mauna_map.cancelPolygon();        },        callBack: function() {            var map = mauna_map_tool.map;            mauna_map.initPolygon(map);            map.on('draw:created', function(e) {                console.log(e);                area.push(e.layer);                console.log(area);            });        },        closeFunc: function() {        },    },    ranging: {        className: 'ranging',        line: null,        template: '<li data-picture="0" class="ranging"><i class="map-icon map-rule" data-placement="auto bottom" data-toggle="tooltip" title="" data-original-title="距离测量"></i></li>',        clickFunc1: function(e) {            mauna_map_tool.close_all_tools();            mauna_map.startLine(mauna_map_tool.map, 'ranging');        },        clickFunc2: function(e) {            mauna_map.endLine();        },        callBack: function() {            //var map = mauna_map_tool.map;        },        closeFunc: function() {        },    },    map_source: {        className: 'map_source',        template: '<li data-picture="0" class="map_source">\                        <i class="map-icon map-map" data-placement="auto bottom" data-toggle="tooltip" title="" data-original-title="地图来源"></i>\                        <div class="map_source_window">\                            <div class="map_source_container">\                                <div class="map_source_item" data-source="gaode">\                                    <span>高德地图</span><i></i>\                                </div>\                                <div class="map_source_item" data-source="google">\                                    <span>谷歌地图</span><i></i>\                                </div>\                                <div class="map_source_item" data-source="tianditu">\                                    <span>天地图</span><i></i>\                                </div>\                                <div class="map_source_item" data-source="geoq">\                                    <span>智图（亮色）</span><i></i>\                                </div>\                                <div class="map_source_item" data-source="geoq-bb">\                                    <span>智图（暗色）</span><i></i>\                                </div>\                            </div>\                            <div class="map_source_options">\                                <div class="map_source_option" data-option="satel">\                                    <div class="map_source_img"></div>\                                    <img src="/common/mauna/images/source_satel.png">\                                    <span>卫星</span>\                                </div>\                                <div class="map_source_option map_source_img_active" data-option="map">\                                    <div class="map_source_img"></div>\                                    <img src="/common/mauna/images/source_map.png">\                                    <span>地图</span>\                                </div>\                            </div>\                            <div class="map_source_road" data-road="close">\                                <span>路况</span>\                                <img class="close" src="common/mauna/images/map_source_road_close.png">\                            </div>\                        </div>\                    </li>',        clickFunc1: function(e) {            mauna_map_tool.close_all_tools();        },        clickFunc2: function(e) {},        callBack: function() {            var map = mauna_map_tool.map;            var map_source_window = mauna_map_tool.map_container.find('.map_source_window');            var _open = 'open',                _close = 'close';            var _open_img = 'common/mauna/images/map_source_road_open.png';            var _close_img = 'common/mauna/images/map_source_road_close.png';            var _map = 'gaode',                _option = 'map',                _road = 'close';            map_source_window.on('click', '.map_source_item', function() {                map_source_window.find('.map_source_item').removeClass('map_source_item_active');                var _this = $(this);                _this.addClass('map_source_item_active');                _map = _this.attr('data-source');                if (mauna_map_tool.click_for_setting) {                    mauna_map_tool.map_default_show.default_map_source = _map;                    mauna_map_tool.map_setting_callback();                } else {                    mauna_map_tool.setting.default_map_source = _map;                    mauna_map_tool.save_setting_cookie();                }                changeMap();            });            map_source_window.on('click', '.map_source_img', function() {                map_source_window.find('.map_source_option').removeClass('map_source_img_active');                var _this = $(this).parent();                _this.addClass('map_source_img_active');                _option = _this.attr('data-option');                changeMap();            });            map_source_window.on('click', '.map_source_road', function() {                var _this = $(this);                var open_close = _this.attr('data-road');                if (open_close == _close) {                    _road = _open;                    _this.attr('data-road', _open);                    _this.find('img').attr('src', _open_img);                    _this.find('img').removeClass(_close);                    _this.find('img').addClass(_open);                } else {                    _road = _close;                    _this.attr('data-road', _close);                    _this.find('img').attr('src', _close_img);                    _this.find('img').removeClass(_open);                    _this.find('img').addClass(_close);                }                changeMap();            });            function changeMap() {                console.log(_map, _option, _road);                var _map_option, center, open_close;                _option == 'satel' ? _map_option = _map + '-satellite' : _map_option = _map;                _road == 'open' ? open_close = true : open_close = false;                center = map.getCenter();                mauna_map.changeMap(map, _map_option, open_close);                map.setView(center);            }        },        closeFunc: function() {            $(document).find('.map_source_window').hide();        },        change_source_setting: function(map_source) {            var map_source_window = mauna_map_tool.map_container.find('.map_source_window');            var count = 0;            for (var source in map_source) {                if (map_source[source]) {                    map_source_window.find('.map_source_item[data-source=' + source + ']').show();                    map_source_window.find('.map_source_item[data-source=' + source + ']').attr('shown', "show");                    count++;                } else {                    map_source_window.find('.map_source_item[data-source=' + source + ']').hide();                    map_source_window.find('.map_source_item[data-source=' + source + ']').attr('shown', "hide");                }            }            map_source_window.attr('class', 'map_source_window map-source-' + count);        },        change_default: function(default_map_source) {            var map_source_window = mauna_map_tool.map_container.find('.map_source_window');            if (map_source_window.find('.map_source_item[data-source=' + default_map_source + ']').attr('shown') == "show") {                map_source_window.find('.map_source_item[data-source=' + default_map_source + ']').click();            } else {                $(map_source_window.find('.map_source_item[shown=show]')[0]).click();            }            mauna_map_tool.map_container.find('.map_source').click();        }    }};